name: "Run Unit Tests"

on: [ workflow_call ]

permissions:
  contents: read

env:
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  generate-shards:
    runs-on: buildjet-8vcpu-ubuntu-2204
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive # Needed in order to fetch Kalium sources for building
          fetch-depth: 0

      - name: Set up JDK 17
        uses: buildjet/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

      - name: Generate sharded tests
        id: generate-shards
        run: |
          ./gradlew generateShardsForTests

      - name: Display Shards created
        run: python3 -mjson.tool shards.json

      - name: Upload Shards as output
        uses: actions/upload-artifact@v4
        with:
          name: shards
          path: shards.json
  tests:
    runs-on: buildjet-8vcpu-ubuntu-2204
    needs: [ generate-shards ]
    strategy:
      matrix:
        shardIndex: [ 0,  1,  2,  3 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive # Needed in order to fetch Kalium sources for building
          fetch-depth: 0

      - name: Set up JDK 17
        uses: buildjet/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

      - name: Test Build Logic
        run: |
          ./gradlew -p buildSrc test
          ./gradlew -p build-logic :plugins:test

      - name: Download Shards as input
        uses: actions/download-artifact@v4
        with:
          name: shards

      - name: Test with with shards
        run: |
          ./gradlew :app:unitTestShard${{ matrix.shardIndex }} koverXmlReport
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Uploads test results as GitHub artifacts, so publish-test-results can find them later.
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.shardIndex }}
          path: |
            **/build/test-results/**/*.xml
            **/build/outputs/androidTest-results/**/*.xml

      #      - name: Generate report
      #        uses: actions/upload-artifact@v4
      #        with:
      #          name: report-${{ matrix.shardIndex }}
      #          path: app/build/reports/kover
      #
      #      - name: Download Test Reports Folder
      #        uses: actions/download-artifact@v4
      #        with:
      #          name: report-${{ matrix.shardIndex }}
      #          path: app/build/reports/kover
      #          merge-multiple: true

      #      - name: Upload code coverage to codecov
      #        uses: codecov/codecov-action@13ce06bfc6bbe3ecf90edbbf1bc32fe5978ca1d3
      #        with:
      #          token: ${{ secrets.CODECOV_TOKEN }}
      #          files: "app/build/reports/kover/report.xml"

      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  create-artifacts:
    runs-on: buildjet-8vcpu-ubuntu-2204
    needs: [ tests ]

    steps:
      - name: Install Pip for test result publishing
        run: sudo apt-get install -y python3-pip

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: all-test-results

      - name: Get commit hash
        run: echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Combine and zip results
        run: |
          mkdir -p combined-results
          # Find all XML files from downloaded artifacts and copy them
          find all-test-results -type f -name "*.xml" -exec cp {} combined-results \;
          # Create zip file
          zip -r unit-tests-android_${{ env.COMMIT_HASH }}.zip combined-results

      - name: Upload zipped test results
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-android_${{ env.COMMIT_HASH }}
          path: unit-tests-android_${{ env.COMMIT_HASH }}.zip
