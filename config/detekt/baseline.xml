<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>AnnotationSpacing:ConversationListViewModelTest.kt$ConversationListViewModelTest$@OptIn(ExperimentalCoroutinesApi::class) @ExtendWith(CoroutineTestExtension::class)</ID>
    <ID>ArgumentListWrapping:ConversationMessagesViewModelArrangement.kt$ConversationMessagesViewModelArrangement$( "key", assetMimeType, assetDataPath, assetSize, assetName, AttachmentType.fromMimeTypeString(assetMimeType) )</ID>
    <ID>ArgumentListWrapping:DebugDataOptions.kt$(modifier = Modifier.wrapContentWidth(), title = { Text( style = MaterialTheme.wireTypography.body01, color = MaterialTheme.wireColorScheme.onBackground, text = stringResource(R.string.label_get_e2ei_cetificate), modifier = Modifier.padding(start = dimensions().spacing8x) ) }, actions = { WirePrimaryButton( onClick = { enrollE2EI() }, text = stringResource(R.string.label_get_e2ei_cetificate), fillMaxWidth = false ) } )</ID>
    <ID>ArgumentListWrapping:DrawableResultWrapper.kt$DrawableResultWrapper$( source = ImageSource(file = assetPath, diskCacheKey = assetPath.name), mimeType = null, dataSource = DataSource.DISK )</ID>
    <ID>ArgumentListWrapping:EditGuestAccessScreen.kt$( onConfirm = ::onGuestDialogConfirm, onDialogDismiss = ::onGuestDialogDismiss )</ID>
    <ID>ArgumentListWrapping:EditGuestAccessScreen.kt$( onConfirm = ::removeGuestLink, onDialogDismiss = ::onRevokeDialogDismiss )</ID>
    <ID>ArgumentListWrapping:FileUtil.kt$( this, getProviderAuthority(), it )</ID>
    <ID>ArgumentListWrapping:FileUtil.kt$( this, getProviderAuthority(), path.toFile(), assetDisplayName )</ID>
    <ID>ArgumentListWrapping:GetE2EICertificateUI.kt$( context.getActivity()!!.activityResultRegistry, forceLoginFlow = true )</ID>
    <ID>ArgumentListWrapping:GroupConversationDetailsViewModel.kt$GroupConversationDetailsViewModel$( isServicesAllowed = !enableServices, error = GroupConversationOptionsState.Error.UpdateServicesError(result.cause) )</ID>
    <ID>ArgumentListWrapping:GroupOptionsScreen.kt$( title = stringResource(R.string.disable_guests_dialog_title), text = stringResource(R.string.disable_guests_dialog_description), onDismiss = onAllowGuestsDialogDismissed, buttonsHorizontalAlignment = false, optionButton1Properties = WireDialogButtonProperties( onClick = onNotAllowGuestsClicked, text = stringResource(id = R.string.disable_guests_dialog_button), type = WireDialogButtonType.Primary ), optionButton2Properties = WireDialogButtonProperties( text = stringResource(R.string.allow_guests), onClick = onAllowGuestsClicked, type = WireDialogButtonType.Primary ), dismissButtonProperties = WireDialogButtonProperties( text = stringResource(R.string.label_cancel), onClick = onAllowGuestsDialogDismissed ) )</ID>
    <ID>ArgumentListWrapping:ImportMediaScreen.kt$(text = stringResource(R.string.label_learn_more), tag = "learn_more", annotation = learnMoreUrl, onClick = { CustomTabsHelper.launchUrl(context, learnMoreUrl) } )</ID>
    <ID>ArgumentListWrapping:LegalHoldSubjectProfileDialog.kt$( title = stringResource(id = R.string.legal_hold_subject_dialog_title, userName), withDefaultInfo = true, cancelText = stringResource(id = R.string.label_close), dialogDismissed = dialogDismissed)</ID>
    <ID>ArgumentListWrapping:LegalHoldSubjectProfileDialog.kt$( title = stringResource(id = R.string.legal_hold_subject_self_dialog_title), withDefaultInfo = true, cancelText = stringResource(id = R.string.label_close), dialogDismissed = dialogDismissed)</ID>
    <ID>ArgumentListWrapping:MarkdownHelperTest.kt$MarkdownHelperTest$(TableRow() .apply { appendChild(TableCell().apply { appendChild(Text("Cell")) }) })</ID>
    <ID>ArgumentListWrapping:MarkdownHelperTest.kt$MarkdownHelperTest$(TableRow() .apply { appendChild(TableCell().apply { appendChild(Text("Header")) }) })</ID>
    <ID>ArgumentListWrapping:MessageExpiration.kt$&lt;no name provided&gt;$( when (type) { StringResourceType.WEEKS -&gt; R.plurals.weeks_left StringResourceType.DAYS -&gt; R.plurals.days_left StringResourceType.HOURS -&gt; R.plurals.hours_left StringResourceType.MINUTES -&gt; R.plurals.minutes_left StringResourceType.SECONDS -&gt; R.plurals.seconds_left }, quantity, quantity )</ID>
    <ID>ArgumentListWrapping:MessagePreviewContentMapper.kt$( userUIText, UIText.StringResource( if (isSelfMessage) R.string.last_message_self_user_shared_asset else R.string.last_message_other_user_shared_asset ) )</ID>
    <ID>ArgumentListWrapping:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$( content = MessagePreviewContent.WithUser.Asset("admin", AssetType.IMAGE), isSelfMessage = false )</ID>
    <ID>ArgumentListWrapping:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$( content = MessagePreviewContent.WithUser.Asset("admin", AssetType.IMAGE), isSelfMessage = true )</ID>
    <ID>ArgumentListWrapping:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$( content = MessagePreviewContent.WithUser.Asset("admin", AssetType.VIDEO), isSelfMessage = true )</ID>
    <ID>ArgumentListWrapping:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$( content = MessagePreviewContent.WithUser.Knock("admin"), isSelfMessage = false )</ID>
    <ID>ArgumentListWrapping:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$( content = MessagePreviewContent.WithUser.Knock("admin"), isSelfMessage = true )</ID>
    <ID>ArgumentListWrapping:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$( content = MessagePreviewContent.WithUser.MemberLeft("user"), isSelfMessage = false )</ID>
    <ID>ArgumentListWrapping:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$( content = MessagePreviewContent.WithUser.MemberLeft("user"), isSelfMessage = true )</ID>
    <ID>ArgumentListWrapping:MessageTypes.kt$( color = MaterialTheme.wireColorScheme.onPrimary, shape = RoundedCornerShape(dimensions().messageAssetBorderRadius) )</ID>
    <ID>ArgumentListWrapping:Mock.kt$( flowStatus = MessageFlowStatus.Delivered, isDeleted = true, expirationStatus = ExpirationStatus.NotExpirable )</ID>
    <ID>ArgumentListWrapping:MyAccountScreen.kt$( text = stringResource(R.string.settings_myaccount_reset_password).toTitleCase(), onClick = { CustomTabsHelper.launchUrl(context, forgotPasswordUrl) })</ID>
    <ID>ArgumentListWrapping:OAuthUseCase.kt$OAuthUseCase$( OAUTH_ACTIVITY_RESULT_KEY, ActivityResultContracts.StartActivityForResult() )</ID>
    <ID>ArgumentListWrapping:OAuthUseCase.kt$OAuthUseCase$( authServiceConfig, clientId, ResponseTypeValues.CODE, URL_AUTH_REDIRECT )</ID>
    <ID>ArgumentListWrapping:OAuthUseCase.kt$OAuthUseCase$( codeVerifier, getCodeChallenge(codeVerifier), CODE_VERIFIER_CHALLENGE_METHOD )</ID>
    <ID>ArgumentListWrapping:OAuthUseCase.kt$OAuthUseCase$( message = "OAuthTokenRefreshManager: Error refreshing tokens, continue with login!", throwable = exception )</ID>
    <ID>ArgumentListWrapping:ObserveImageAssetMessagesFromConversationUseCaseTest.kt$ObserveImageAssetMessagesFromConversationUseCaseTest$( "asset2", Instant.parse("2023-11-12T10:00:00.671Z") )</ID>
    <ID>ArgumentListWrapping:ObserveImageAssetMessagesFromConversationUseCaseTest.kt$ObserveImageAssetMessagesFromConversationUseCaseTest.Arrangement$( getAssetMessages, UIAssetMapper(), TestDispatcherProvider(), timeZoneProvider, )</ID>
    <ID>ArgumentListWrapping:PersistentWebsocketCheckWorker.kt$( NAME, ExistingPeriodicWorkPolicy.CANCEL_AND_REENQUEUE, PeriodicWorkRequestBuilder&lt;PersistentWebsocketCheckWorker&gt;(WORK_INTERVAL) .addTag(TAG) // adds the tag so we can cancel later all related work. .build() )</ID>
    <ID>ArgumentListWrapping:QuotedMessage.kt$( senderName.asString(), style = style, modifier = modifier, startContent = { startContent() }, centerContent = { StatusBox(stringResource(R.string.deleted_message_text)) }, footerContent = { QuotedMessageOriginalDate(originalDateDescription) }, clickable = clickable )</ID>
    <ID>ArgumentListWrapping:RegularMessageContentMapper.kt$RegularMessageMapper$( if (message.isSelfMessage) { UIText.StringResource(messageResourceProvider.memberNameYouTitlecase) } else { sender?.name.orUnknownName() }, message.isSelfMessage )</ID>
    <ID>ArgumentListWrapping:SendMessageViewModelTest.kt$SendMessageViewModelTest$( "key", "audio/mp4", assetPath, assetSize, assetName, AttachmentType.AUDIO )</ID>
    <ID>ArgumentListWrapping:SendMessageViewModelTest.kt$SendMessageViewModelTest$( "key", "image/jpeg", assetPath, assetSize, assetName, AttachmentType.IMAGE )</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$("AppLockConfig " + "isAppLockEditable: ${settingsState.isAppLockEditable} isAppLockEnabled: ${settingsState.isAppLockEnabled}")</ID>
    <ID>ArgumentListWrapping:SystemMessageContentMapperTest.kt$SystemMessageContentMapperTest$( listOf(userId2, userId3), MessageContent.MemberChange.FailedToAdd.Type.Unknown )</ID>
    <ID>ArgumentListWrapping:UsersTypingIndicator.kt$( initialValue = -10f, targetValue = -2f, animationSpec = infiniteRepeatable( animation = tween(ANIMATION_SPEED_MILLIS, easing = FastOutSlowInEasing), repeatMode = RepeatMode.Reverse ), label = infiniteTransition.label )</ID>
    <ID>ArgumentListWrapping:WelcomeScreen.kt$( isThereActiveSession = false, maxAccountsReached = false, state = ServerConfig.DEFAULT, navigateBack = {}, navigate = {})</ID>
    <ID>ArgumentListWrapping:WireActivityDialogs.kt$( JoinConversationViaCodeState.Error(CheckConversationInviteCodeUseCase.Result.Failure.InvalidCodeOrKey), {})</ID>
    <ID>ArgumentListWrapping:WireActivityDialogs.kt$( JoinConversationViaCodeState.Show("convName", "code", "key", "domain", false), {})</ID>
    <ID>ArgumentListWrapping:WireActivityDialogs.kt$( JoinConversationViaCodeState.Show("convName", "code", "key", "domain", true), {})</ID>
    <ID>ArgumentListWrapping:WireActivityDialogs.kt$( NewClientsData.CurrentUser(listOf(NewClientInfo("date", UIText.DynamicString("name"))), UserId("id", "domain")), {}, {}, {})</ID>
    <ID>ArgumentListWrapping:WireButton.kt$(modifier = Modifier .align(Alignment.CenterEnd) .onGloballyPositioned { endItemWidth = it.size.width } )</ID>
    <ID>ArgumentListWrapping:WireNotificationManagerTest.kt$WireNotificationManagerTest$( any(), any(), TestUser.SELF_USER.handle!! )</ID>
    <ID>ArgumentListWrapping:WireNotificationManagerTest.kt$WireNotificationManagerTest$( listOf(), TestUser.SELF_USER.id, TestUser.SELF_USER.handle!! )</ID>
    <ID>ArgumentListWrapping:WireNotificationManagerTest.kt$WireNotificationManagerTest$( messageNotifications, TestUser.SELF_USER.id, TestUser.SELF_USER.handle!! )</ID>
    <ID>ArgumentListWrapping:WireNotificationManagerTest.kt$WireNotificationManagerTest$( newNotifications = any(), userId = any(), userName = TestUser.SELF_USER.handle!! )</ID>
    <ID>ArgumentListWrapping:WireNotificationManagerTest.kt$WireNotificationManagerTest.Companion$( "message_id", LocalNotificationMessageAuthor("author", null), Instant.DISTANT_FUTURE, "testing text" )</ID>
    <ID>ArgumentListWrapping:WireNotificationManagerTest.kt$WireNotificationManagerTest.Companion$( id, "name_${id.value}", messages, true )</ID>
    <ID>ArgumentListWrapping:WireTextFieldDefaults.kt$&lt;no name provided&gt;$( when (state) { WireTextFieldState.Disabled -&gt; disabledTextColor is WireTextFieldState.Error -&gt; errorColor WireTextFieldState.Success -&gt; successColor else -&gt; textColor })</ID>
    <ID>ArgumentListWrapping:WireTextFieldDefaults.kt$&lt;no name provided&gt;$( when (state) { is WireTextFieldState.Error -&gt; errorColor else -&gt; descriptionColor })</ID>
    <ID>ArgumentListWrapping:WireTextFieldDefaults.kt$&lt;no name provided&gt;$( when { state is WireTextFieldState.Error -&gt; errorColor state is WireTextFieldState.Success -&gt; successColor focused -&gt; focusColor else -&gt; borderColor })</ID>
    <ID>ArgumentListWrapping:WireTextFieldDefaults.kt$&lt;no name provided&gt;$( when { state is WireTextFieldState.Error -&gt; errorColor state is WireTextFieldState.Success -&gt; successColor focused -&gt; focusColor else -&gt; labelColor })</ID>
    <ID>BlockCommentInitialStarAlignment:ConversationInfoViewModel.kt$ConversationInfoViewModel$/* If this would be collected in the scope of this ViewModel (in `init` for instance) then there would be a race condition. [MessageComposerViewModel] handles the navigating back after removing a group and here it would navigate to home if the group is removed without back params indicating that the user actually have just done that. The info about the group being removed could appear before the back navigation params. That's why it's being observed in the `LaunchedEffect` in the Composable. */</ID>
    <ID>CommentSpacing:FeatureVisibilityFlags.kt$//ACCEPTANCE CRITERIA</ID>
    <ID>CommentSpacing:FeatureVisibilityFlags.kt$//As a Beta user I don’t want to press on buttons that don’t have functions yet,</ID>
    <ID>CommentSpacing:FeatureVisibilityFlags.kt$//Buttons to remove from the UI:</ID>
    <ID>CommentSpacing:FeatureVisibilityFlags.kt$//Conversation View → + icon → share location</ID>
    <ID>CommentSpacing:FeatureVisibilityFlags.kt$//Conversation View → :smile: icon</ID>
    <ID>CommentSpacing:FeatureVisibilityFlags.kt$//Conversation View → @ icon</ID>
    <ID>CommentSpacing:FeatureVisibilityFlags.kt$//Conversation View → Aa icon</ID>
    <ID>CommentSpacing:FeatureVisibilityFlags.kt$//Conversation View → GIF icon</ID>
    <ID>CommentSpacing:FeatureVisibilityFlags.kt$//Conversation View → ping icon</ID>
    <ID>CommentSpacing:FeatureVisibilityFlags.kt$//Conversation View → search icon</ID>
    <ID>CommentSpacing:FeatureVisibilityFlags.kt$//Conversation view → + icon → Audio messages</ID>
    <ID>CommentSpacing:FeatureVisibilityFlags.kt$//Settings → App settings entry</ID>
    <ID>CommentSpacing:FeatureVisibilityFlags.kt$//Settings → Backup and restore information entry</ID>
    <ID>CommentSpacing:FeatureVisibilityFlags.kt$//User Profile → Edit icon</ID>
    <ID>CommentSpacing:FeatureVisibilityFlags.kt$//long press on images → copy</ID>
    <ID>CommentSpacing:FeatureVisibilityFlags.kt$//long press on images → edit</ID>
    <ID>CommentSpacing:FeatureVisibilityFlags.kt$//long press on text → edit entry</ID>
    <ID>CommentSpacing:LastConversationEvent.kt$CallTime$//TODO: This could be a Long timestamp,</ID>
    <ID>CommentSpacing:Theme.kt$//import com.wire.android.navigation.rememberNavigator</ID>
    <ID>CommentSpacing:ThemeUtils.kt$ScreenSizeDependent$//sw320dp</ID>
    <ID>CommentSpacing:ThemeUtils.kt$ScreenSizeDependent$//sw480dp</ID>
    <ID>CommentSpacing:ThemeUtils.kt$ScreenSizeDependent$//sw600dp</ID>
    <ID>CommentSpacing:ThemeUtils.kt$ScreenSizeDependent$//sw840dp</ID>
    <ID>CommentWrapping:ConversationScreen.kt$/* do nothing */</ID>
    <ID>CommentWrapping:DrawingCanvasComponent.kt$/*, bitmap*/</ID>
    <ID>CommentWrapping:FileUtil.kt$/* description = */</ID>
    <ID>CommentWrapping:FileUtil.kt$/* isMediaScannerScannable = */</ID>
    <ID>CommentWrapping:FileUtil.kt$/* length = */</ID>
    <ID>CommentWrapping:FileUtil.kt$/* mimeType = */</ID>
    <ID>CommentWrapping:FileUtil.kt$/* path = */</ID>
    <ID>CommentWrapping:FileUtil.kt$/* showNotification = */</ID>
    <ID>CommentWrapping:FileUtil.kt$/* title = */</ID>
    <ID>CommentWrapping:IncomingCallScreen.kt$/* do nothing */</ID>
    <ID>CommentWrapping:OngoingCallScreen.kt$/* do nothing */</ID>
    <ID>CommentWrapping:SendMessageViewModel.kt$SendMessageViewModel$/* do nothing */</ID>
    <ID>CommentWrapping:VerifyEmailViewModel.kt$VerifyEmailViewModel$/*no-op*/</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:AssetMessageTypes.kt$val ( name, icon, size, message ) = createRefs()</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:CallOptionsControls.kt$val (microphoneIcon, microphoneText, cameraIcon, cameraText, speakerIcon, speakerText) = createRefs()</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:ImageAsset.kt$val (conversationIdString, messageId, isSelfAsset, isEphemeral) = split(":")</ID>
    <ID>Filename:WireTextFieldDefaults.kt$com.wire.android.ui.common.textfield.WireTextFieldDefaults.kt</ID>
    <ID>KdocWrapping:AttachmentOptions.kt$/** Nothing to do here when permission is denied once */</ID>
    <ID>KdocWrapping:DownloadedAssetDialog.kt$/** Nothing to do **/</ID>
    <ID>KdocWrapping:MediaGalleryScreen.kt$/** Nothing to do **/</ID>
    <ID>KdocWrapping:RecordAudioComponent.kt$/** Nothing to do **/</ID>
    <ID>MultiLineIfElse:AccountSwitchUseCase.kt$AccountSwitchUseCase$appLogger.i("$TAG No next account to switch to")</ID>
    <ID>MultiLineIfElse:AccountSwitchUseCase.kt$AccountSwitchUseCase$appLogger.i("$TAG Switching to next account: ${nextSessionId.toLogString()}")</ID>
    <ID>MultiLineIfElse:AdditionalOptionButton.kt$WireButtonState.Disabled</ID>
    <ID>MultiLineIfElse:AuthorHeaderHelper.kt$AuthorHeaderHelper$currentMessage is UIMessage.Regular</ID>
    <ID>MultiLineIfElse:AuthorHeaderHelper.kt$AuthorHeaderHelper$false</ID>
    <ID>MultiLineIfElse:BackupAndRestoreViewModel.kt$BackupAndRestoreViewModel$kaliumFileSystem.delete(latestImportedBackupTempPath)</ID>
    <ID>MultiLineIfElse:Buttons.kt$WireButtonState.Default</ID>
    <ID>MultiLineIfElse:Buttons.kt$WireButtonState.Disabled</ID>
    <ID>MultiLineIfElse:CommonTopAppBar.kt$R.drawable.ic_microphone_white</ID>
    <ID>MultiLineIfElse:CommonTopAppBar.kt$R.drawable.ic_microphone_white_muted</ID>
    <ID>MultiLineIfElse:CommonTopAppBar.kt$R.string.content_description_calling_call_muted</ID>
    <ID>MultiLineIfElse:CommonTopAppBar.kt$R.string.content_description_calling_call_unmuted</ID>
    <ID>MultiLineIfElse:ConversationScreen.kt$(conversationInfoViewState.conversationDetailsData as? ConversationDetailsData.Group)?.conversationId.let { navigator.navigate(NavigationCommand(OtherUserProfileScreenDestination(mentionUserId, it))) }</ID>
    <ID>MultiLineIfElse:ConversationScreen.kt$navigator.navigate(NavigationCommand(SelfUserProfileScreenDestination))</ID>
    <ID>MultiLineIfElse:CreateAccountDetailsScreen.kt$WireTextFieldState.Default</ID>
    <ID>MultiLineIfElse:CreateAccountDetailsScreen.kt$when (state.error) { CreateAccountDetailsViewState.DetailsError.TextFieldError.PasswordsNotMatchingError -&gt; WireTextFieldState.Error(stringResource(id = R.string.create_account_details_password_not_matching_error)) CreateAccountDetailsViewState.DetailsError.TextFieldError.InvalidPasswordError -&gt; WireTextFieldState.Error(stringResource(id = R.string.create_account_details_password_error)) }</ID>
    <ID>MultiLineIfElse:CreateAccountEmailScreen.kt$""</ID>
    <ID>MultiLineIfElse:CreateAccountEmailScreen.kt$WireTextFieldState.Default</ID>
    <ID>MultiLineIfElse:CreateAccountEmailScreen.kt$WireTextFieldState.Error()</ID>
    <ID>MultiLineIfElse:CreateAccountEmailScreen.kt$when (error) { CreateAccountEmailViewState.EmailError.TextFieldError.AlreadyInUseError -&gt; stringResource(R.string.create_account_email_already_in_use_error) CreateAccountEmailViewState.EmailError.TextFieldError.BlacklistedEmailError -&gt; stringResource(R.string.create_account_email_blacklisted_error) CreateAccountEmailViewState.EmailError.TextFieldError.DomainBlockedError -&gt; stringResource(R.string.create_account_email_domain_blocked_error) CreateAccountEmailViewState.EmailError.TextFieldError.InvalidEmailError -&gt; stringResource(R.string.create_account_email_invalid_error) }</ID>
    <ID>MultiLineIfElse:CreatePasswordProtectedGuestLinkScreen.kt$WireButtonState.Default</ID>
    <ID>MultiLineIfElse:CreatePasswordProtectedGuestLinkScreen.kt$WireButtonState.Disabled</ID>
    <ID>MultiLineIfElse:CurrentScreenManager.kt$CurrentScreenManager$currentScreenState</ID>
    <ID>MultiLineIfElse:CurrentScreenManager.kt$CurrentScreenManager$flowOf(CurrentScreen.InBackground)</ID>
    <ID>MultiLineIfElse:DeepLinkProcessor.kt$DeepLinkProcessor$DeepLinkResult.MigrationLogin(String.EMPTY)</ID>
    <ID>MultiLineIfElse:DeepLinkProcessor.kt$DeepLinkProcessor$DeepLinkResult.MigrationLogin(it)</ID>
    <ID>MultiLineIfElse:DeviceDetailsScreen.kt$MaterialTheme.wireColorScheme.onBackground</ID>
    <ID>MultiLineIfElse:DeviceDetailsScreen.kt$MaterialTheme.wireColorScheme.secondaryText</ID>
    <ID>MultiLineIfElse:ElevationScrollExt.kt$maxElevation</ID>
    <ID>MultiLineIfElse:ElevationScrollExt.kt$minOf((it.offset + it.size - layoutInfo.viewportEndOffset).dp, maxElevation)</ID>
    <ID>MultiLineIfElse:ElevationScrollExt.kt$minOf(firstVisibleItemScrollOffset.toFloat().dp, maxElevation)</ID>
    <ID>MultiLineIfElse:GetE2eiCertificateButton.kt$WireButtonState.Default</ID>
    <ID>MultiLineIfElse:GetE2eiCertificateButton.kt$WireButtonState.Disabled</ID>
    <ID>MultiLineIfElse:HighLightName.kt$MaterialTheme.wireColorScheme.secondaryText</ID>
    <ID>MultiLineIfElse:HighLightName.kt$MaterialTheme.wireTypography.title02.color</ID>
    <ID>MultiLineIfElse:ImageMessageTypes.kt$R.string.asset_message_download_in_progress_text</ID>
    <ID>MultiLineIfElse:ImageMessageTypes.kt$R.string.asset_message_upload_in_progress_text</ID>
    <ID>MultiLineIfElse:ImageMessageTypes.kt$R.string.error_downloading_image_message</ID>
    <ID>MultiLineIfElse:ImageMessageTypes.kt$R.string.error_uploading_image_message</ID>
    <ID>MultiLineIfElse:LaunchedEffects.kt$prevPair</ID>
    <ID>MultiLineIfElse:LaunchedEffects.kt$prevPair.second to newScrollIndex</ID>
    <ID>MultiLineIfElse:LoginScreen.kt$E2EIEnrollmentScreenDestination</ID>
    <ID>MultiLineIfElse:LoginScreen.kt$HomeScreenDestination</ID>
    <ID>MultiLineIfElse:LoginScreen.kt$InitialSyncScreenDestination</ID>
    <ID>MultiLineIfElse:MarkdownHelper.kt$null</ID>
    <ID>MultiLineIfElse:MarkdownHelper.kt$this</ID>
    <ID>MultiLineIfElse:MessageCompositionHolder.kt$MessageCompositionHolder$Pair(rangeEnd, rangeEnd)</ID>
    <ID>MultiLineIfElse:MessageExpiration.kt$SelfDeletionTimerHelper.SelfDeletionTimerState.Expirable$1.toDuration(durationUnit)</ID>
    <ID>MultiLineIfElse:MessageExpiration.kt$SelfDeletionTimerHelper.SelfDeletionTimerState.Expirable$timeLeftForDurationUnit</ID>
    <ID>MultiLineIfElse:MessagePreviewContentMapper.kt$R.string.last_message_other_changed_conversation_name</ID>
    <ID>MultiLineIfElse:MessagePreviewContentMapper.kt$R.string.last_message_other_user_joined_conversation</ID>
    <ID>MultiLineIfElse:MessagePreviewContentMapper.kt$R.string.last_message_other_user_knock</ID>
    <ID>MultiLineIfElse:MessagePreviewContentMapper.kt$R.string.last_message_other_user_left_conversation</ID>
    <ID>MultiLineIfElse:MessagePreviewContentMapper.kt$R.string.last_message_other_user_shared_asset</ID>
    <ID>MultiLineIfElse:MessagePreviewContentMapper.kt$R.string.last_message_other_user_shared_image</ID>
    <ID>MultiLineIfElse:MessagePreviewContentMapper.kt$R.string.last_message_other_user_shared_location</ID>
    <ID>MultiLineIfElse:MessagePreviewContentMapper.kt$R.string.last_message_other_user_shared_video</ID>
    <ID>MultiLineIfElse:MessagePreviewContentMapper.kt$R.string.last_message_self_changed_conversation_name</ID>
    <ID>MultiLineIfElse:MessagePreviewContentMapper.kt$R.string.last_message_self_user_joined_conversation</ID>
    <ID>MultiLineIfElse:MessagePreviewContentMapper.kt$R.string.last_message_self_user_knock</ID>
    <ID>MultiLineIfElse:MessagePreviewContentMapper.kt$R.string.last_message_self_user_left_conversation</ID>
    <ID>MultiLineIfElse:MessagePreviewContentMapper.kt$R.string.last_message_self_user_shared_asset</ID>
    <ID>MultiLineIfElse:MessagePreviewContentMapper.kt$R.string.last_message_self_user_shared_image</ID>
    <ID>MultiLineIfElse:MessagePreviewContentMapper.kt$R.string.last_message_self_user_shared_location</ID>
    <ID>MultiLineIfElse:MessagePreviewContentMapper.kt$R.string.last_message_self_user_shared_video</ID>
    <ID>MultiLineIfElse:MessageTypes.kt$WireButtonState.Default</ID>
    <ID>MultiLineIfElse:MessageTypes.kt$WireButtonState.Disabled</ID>
    <ID>MultiLineIfElse:MessageTypes.kt$WireButtonState.Selected</ID>
    <ID>MultiLineIfElse:MutingOptionsSheetContent.kt$RichMenuItemState.DEFAULT</ID>
    <ID>MultiLineIfElse:MutingOptionsSheetContent.kt$RichMenuItemState.SELECTED</ID>
    <ID>MultiLineIfElse:MyAccountScreen.kt$Email( email, clickableActionIfPossible(!state.isEditEmailAllowed, navigateToChangeEmail) )</ID>
    <ID>MultiLineIfElse:MyAccountScreen.kt$null</ID>
    <ID>MultiLineIfElse:NavigationUtils.kt$this</ID>
    <ID>MultiLineIfElse:NavigationUtils.kt$this.substring(0, it)</ID>
    <ID>MultiLineIfElse:OtherUserProfileInfoMessageType.kt$OtherUserProfileInfoMessageType.ArchiveConversationError$R.string.error_archiving_conversation</ID>
    <ID>MultiLineIfElse:OtherUserProfileInfoMessageType.kt$OtherUserProfileInfoMessageType.ArchiveConversationError$R.string.error_unarchiving_conversation</ID>
    <ID>MultiLineIfElse:OtherUserProfileInfoMessageType.kt$OtherUserProfileInfoMessageType.ArchiveConversationSuccess$R.string.success_archiving_conversation</ID>
    <ID>MultiLineIfElse:OtherUserProfileInfoMessageType.kt$OtherUserProfileInfoMessageType.ArchiveConversationSuccess$R.string.success_unarchiving_conversation</ID>
    <ID>MultiLineIfElse:RegisterDeviceScreen.kt$E2EIEnrollmentScreenDestination</ID>
    <ID>MultiLineIfElse:RegisterDeviceScreen.kt$HomeScreenDestination</ID>
    <ID>MultiLineIfElse:RegisterDeviceScreen.kt$InitialSyncScreenDestination</ID>
    <ID>MultiLineIfElse:RemoveDeviceScreen.kt$E2EIEnrollmentScreenDestination</ID>
    <ID>MultiLineIfElse:RemoveDeviceScreen.kt$HomeScreenDestination</ID>
    <ID>MultiLineIfElse:RemoveDeviceScreen.kt$InitialSyncScreenDestination</ID>
    <ID>MultiLineIfElse:SelfDeletionMenuItems.kt$RichMenuItemState.DEFAULT</ID>
    <ID>MultiLineIfElse:SelfDeletionMenuItems.kt$RichMenuItemState.SELECTED</ID>
    <ID>MultiLineIfElse:ServiceDetailsViewModel.kt$ServiceDetailsViewModel$serviceNotFound()</ID>
    <ID>MultiLineIfElse:SettingsScreen.kt$homeStateHolder.navigator.navigate(NavigationCommand(SetLockCodeScreenDestination, BackStackMode.NONE))</ID>
    <ID>MultiLineIfElse:SettingsScreen.kt$turnAppLockOffDialogState.show(Unit)</ID>
    <ID>MultiLineIfElse:ShouldStartPersistentWebSocketServiceUseCase.kt$ShouldStartPersistentWebSocketServiceUseCase$Result.Success(false)</ID>
    <ID>MultiLineIfElse:ShouldStartPersistentWebSocketServiceUseCase.kt$ShouldStartPersistentWebSocketServiceUseCase$Result.Success(true)</ID>
    <ID>MultiLineIfElse:SystemMessageContentMapper.kt$SystemMessageContentMapper$others(members.map { mapMemberName(user = userList.findUser(userId = it), type = SelfNameType.ResourceLowercase) })</ID>
    <ID>MultiLineIfElse:SystemMessageContentMapper.kt$SystemMessageContentMapper$self()</ID>
    <ID>MultiLineIfElse:Theme.kt$emptyArray()</ID>
    <ID>MultiLineIfElse:UpdateE2eiCertificateButton.kt$WireButtonState.Default</ID>
    <ID>MultiLineIfElse:UpdateE2eiCertificateButton.kt$WireButtonState.Disabled</ID>
    <ID>MultiLineIfElse:UserProfileAvatar.kt$ColorPainter(Color.Transparent)</ID>
    <ID>MultiLineIfElse:UserProfileAvatar.kt$getDefaultAvatar(membership = data.membership)</ID>
    <ID>MultiLineIfElse:UserProfileInfo.kt$""</ID>
    <ID>MultiLineIfElse:UserProfileInfo.kt$UIText.StringResource(R.string.username_unavailable_label).asString()</ID>
    <ID>MultiLineIfElse:UsernameTextField.kt$WireTextFieldState.Default</ID>
    <ID>MultiLineIfElse:UsernameTextField.kt$when (errorState) { HandleUpdateErrorState.TextFieldError.UsernameTakenError -&gt; WireTextFieldState.Error(stringResource(id = R.string.create_account_username_taken_error)) HandleUpdateErrorState.TextFieldError.UsernameInvalidError -&gt; WireTextFieldState.Error(stringResource(id = R.string.create_account_username_description)) }</ID>
    <ID>MultiLineIfElse:VerificationCode.kt$WireTextFieldState.Default</ID>
    <ID>MultiLineIfElse:VerificationCode.kt$WireTextFieldState.Error( stringResource(id = R.string.second_factor_code_error) )</ID>
    <ID>MultiLineIfElse:WelcomeScreen.kt$pageState.animateScrollToPage(scrollToPage)</ID>
    <ID>MultiLineIfElse:WelcomeScreen.kt$pageState.scrollToPage(scrollToPage)</ID>
    <ID>MultiLineIfElse:WireActivityDialogs.kt$R.string.team_app_lock_disabled</ID>
    <ID>MultiLineIfElse:WireActivityDialogs.kt$R.string.team_app_lock_enabled</ID>
    <ID>MultiLineIfElse:WireButton.kt$it.fillMaxWidth()</ID>
    <ID>MultiLineIfElse:WireButton.kt$it.wrapContentWidth()</ID>
    <ID>MultiLineIfElse:WireDropDown.kt$MaterialTheme.wireColorScheme.onSecondaryButtonEnabled</ID>
    <ID>MultiLineIfElse:WireDropDown.kt$MaterialTheme.wireColorScheme.onSecondaryButtonSelected</ID>
    <ID>MultiLineIfElse:WireDropDown.kt$MaterialTheme.wireColorScheme.secondaryButtonSelected</ID>
    <ID>MultiLineIfElse:WireDropDown.kt$MaterialTheme.wireColorScheme.secondaryText</ID>
    <ID>MultiLineIfElse:WireDropDown.kt$MaterialTheme.wireColorScheme.tertiaryButtonEnabled</ID>
    <ID>MultiLineIfElse:WireDropDown.kt$stringResource(R.string.wire_dropdown_placeholder)</ID>
    <ID>MultiLineIfElse:WirePasswordTextField.kt$R.string.content_description_hide_password</ID>
    <ID>MultiLineIfElse:WirePasswordTextField.kt$R.string.content_description_reveal_password</ID>
    <ID>NoBlankLineBeforeRbrace:DrawingCanvasViewModel.kt$DrawingCanvasViewModel$ </ID>
    <ID>NoBlankLineBeforeRbrace:EmailComposer.kt$EmailComposer$ </ID>
    <ID>NoBlankLineBeforeRbrace:FakeKaliumFileSystem.kt$FakeKaliumFileSystem$ </ID>
    <ID>NoBlankLineBeforeRbrace:ISOFormatter.kt$ISOFormatter$ </ID>
    <ID>NoBlankLineBeforeRbrace:LastConversationEvent.kt$ConversationLastEvent$ </ID>
    <ID>NoBlankLineBeforeRbrace:ObserveConversationMembersByTypesUseCase.kt$ObserveConversationMembersByTypesUseCase$ </ID>
    <ID>NoBlankLineBeforeRbrace:ObserveConversationMembersByTypesUseCaseTest.kt$ObserveConversationMembersByTypesUseCaseTest$ </ID>
    <ID>NoBlankLineBeforeRbrace:RemoveConversationMemberDialog.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:ScreenStateObserverTest.kt$ScreenStateObserverTest$ </ID>
    <ID>NoBlankLineBeforeRbrace:ScreenStateObserverTest.kt$ScreenStateObserverTest.Arrangement$ </ID>
    <ID>NoBlankLineBeforeRbrace:SearchPeopleScreenState.kt$SearchPeopleScreenState$ </ID>
    <ID>NoBlankLineBeforeRbrace:UserDataStore.kt$UserDataStore$ </ID>
    <ID>NoBlankLineBeforeRbrace:UserTypeMapper.kt$UserTypeMapper$ </ID>
    <ID>NoBlankLineBeforeRbrace:UserTypeMapperTest.kt$UserTypeMapperTest$ </ID>
    <ID>NoBlankLineBeforeRbrace:VerticalSpace.kt$VerticalSpace$ </ID>
    <ID>NoConsecutiveBlankLines:CallRinger.kt$CallRinger$ </ID>
    <ID>NoConsecutiveBlankLines:CoroutineScope.kt$ </ID>
    <ID>NoConsecutiveBlankLines:LastConversationEvent.kt$ </ID>
    <ID>NoConsecutiveBlankLines:LaunchedEffects.kt$ </ID>
    <ID>NoConsecutiveBlankLines:OtherAccount.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ScreenStateObserver.kt$ </ID>
    <ID>NoConsecutiveBlankLines:SearchPeopleScreenState.kt$ </ID>
    <ID>NoConsecutiveBlankLines:SearchTopBar.kt$ </ID>
    <ID>NoConsecutiveBlankLines:StartupBenchmarkWithLogin.kt$StartupBenchmarkWithLogin$ </ID>
    <ID>NoConsecutiveBlankLines:SurfaceBackgroundWrapper.kt$ </ID>
    <ID>NoConsecutiveBlankLines:VersionizerTest.kt$VersionizerTest$ </ID>
    <ID>NoConsecutiveBlankLines:WireTextFieldDefaults.kt$ </ID>
    <ID>NoMultipleSpaces:ApiVersioningDialogs.kt$ </ID>
    <ID>NoMultipleSpaces:ShakeAnimation.kt$ </ID>
    <ID>NoMultipleSpaces:ThemeUtils.kt$ScreenSizeDependent$ </ID>
    <ID>NoSemicolons:CallRinger.kt$CallRinger$;</ID>
    <ID>NoSemicolons:CollapsingTopBarScaffold.kt$State.COLLAPSED$;</ID>
    <ID>NoSemicolons:LastConversationEvent.kt$CallEvent.NoAnswerCall$;</ID>
    <ID>NoSemicolons:NavigationCommand.kt$BackStackMode.NONE$;</ID>
    <ID>NoUnusedImports:SearchPeopleScreenState.kt$com.wire.android.ui.home.conversations.search.SearchPeopleScreenState.kt</ID>
    <ID>NoWildcardImports:ExampleInstrumentedTest.kt$import org.junit.Assert.*</ID>
    <ID>NoWildcardImports:ExampleUnitTest.kt$import org.junit.Assert.*</ID>
    <ID>ParameterWrapping:ConversationScreen.kt$groupDetailsScreenResultRecipient: ResultRecipient&lt;GroupConversationDetailsScreenDestination, GroupConversationDetailsNavBackArgs&gt;</ID>
    <ID>ParameterWrapping:HomeScreen.kt$groupDetailsScreenResultRecipient: ResultRecipient&lt;ConversationScreenDestination, GroupConversationDetailsNavBackArgs&gt;</ID>
    <ID>ParameterWrapping:UsersTypingIndicator.kt$viewModel: TypingIndicatorViewModel = hiltViewModelScoped&lt;TypingIndicatorViewModelImpl, TypingIndicatorViewModel, TypingIndicatorArgs&gt;( TypingIndicatorArgs(conversationId) )</ID>
    <ID>ParameterWrapping:WireActivityViewModel.kt$WireActivityViewModel$private val observeIfE2EIRequiredDuringLoginUseCaseProviderFactory: ObserveIfE2EIRequiredDuringLoginUseCaseProvider.Factory</ID>
    <ID>ParameterWrapping:WireActivityViewModel.kt$WireActivityViewModel$private val observeScreenshotCensoringConfigUseCaseProviderFactory: ObserveScreenshotCensoringConfigUseCaseProvider.Factory</ID>
    <ID>ParameterWrapping:WireItemLabel.kt$contentPadding: PaddingValues = PaddingValues(horizontal = dimensions().spacing6x, vertical = dimensions().spacing2x)</ID>
    <ID>SpacingAroundColon:LastConversationEvent.kt$ConversationLastEvent.Mention$:</ID>
    <ID>SpacingAroundColon:SyncStateObserver.kt$SyncStateObserver$:</ID>
    <ID>SpacingAroundColon:VisibilityState.kt$:</ID>
    <ID>SpacingAroundColon:VisibilityState.kt$VisibilityState$:</ID>
    <ID>SpacingAroundColon:VisibilityState.kt$VisibilityState.Companion$:</ID>
    <ID>SpacingAroundColon:WireForegroundNotificationDetailsProvider.kt$WireForegroundNotificationDetailsProvider$:</ID>
    <ID>SpacingAroundCurly:ObserveConversationMembersByTypesUseCase.kt$ObserveConversationMembersByTypesUseCase${</ID>
    <ID>SpacingAroundCurly:ObserveConversationMembersByTypesUseCase.kt$ObserveConversationMembersByTypesUseCase$}</ID>
    <ID>SpacingAroundOperators:VisibilityState.kt$VisibilityState.Companion$=</ID>
    <ID>SpacingAroundParens:SelfDevicesState.kt$SelfDevicesState$(</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:CreateGroupErrorDialog.kt$@PreviewMultipleThemes @Composable private fun PreviewCreateGroupErrorDialogConflictedBackends()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:CreateGroupErrorDialog.kt$@PreviewMultipleThemes @Composable private fun PreviewCreateGroupErrorDialogUnknown()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:Dialogs.kt$@Composable fun DisableGuestConfirmationDialog(onConfirm: () -&gt; Unit, onDialogDismiss: () -&gt; Unit)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest$@Test fun `given deleting client returns failure, when deleting current client, then return failure`()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest$@Test fun `given deleting client returns invalid credentials, when deleting current client, then return InvalidPassword`()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest$@Test fun `given deleting client returns success, when deleting current client, then return Success`()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest$@Test fun `given no sessions, when logging out, then make all required actions other than logout and return success`()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest$@Test fun `given no valid sessions, when logging out, then make all required actions other than logout and return success`()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest$@Test fun `given password required and valid, when validating password, then return Success with given password`()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest$@Test fun `given password required but invalid, when validating password, then return InvalidPassword`()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest$@Test fun `given password required but not provided, when validating password, then return PasswordRequired`()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest$@Test fun `given password required returns failure, when validating password, then return failure`()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest$@Test fun `given sessions return failure, when hard-logging out sessions, then return failure`()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest$@Test fun `given valid sessions, when logging out, then make all required actions with logout and return success`()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest.Arrangement$@MockK lateinit var accountSwitchUseCase: AccountSwitchUseCase</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest.Arrangement$@MockK lateinit var deleteClientUseCase: DeleteClientUseCase</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest.Arrangement$@MockK lateinit var endCallUseCase: EndCallUseCase</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest.Arrangement$@MockK lateinit var getSelfUserUseCase: GetSelfUserUseCase</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest.Arrangement$@MockK lateinit var getSessionsUseCase: GetSessionsUseCase</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest.Arrangement$@MockK lateinit var globalDataStore: GlobalDataStore</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest.Arrangement$@MockK lateinit var isPasswordRequiredUseCase: IsPasswordRequiredUseCase</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest.Arrangement$@MockK lateinit var logoutUseCase: LogoutUseCase</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest.Arrangement$@MockK lateinit var notificationManager: WireNotificationManager</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest.Arrangement$@MockK lateinit var observeCurrentClientIdUseCase: ObserveCurrentClientIdUseCase</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest.Arrangement$@MockK lateinit var observeEstablishedCallsUseCase: ObserveEstablishedCallsUseCase</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest.Arrangement$@MockK lateinit var userDataStore: UserDataStore</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest.Arrangement$@MockK lateinit var userDataStoreProvider: UserDataStoreProvider</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest.Arrangement$@MockK lateinit var userSessionScope: UserSessionScope</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:ForgotLockScreenViewModelTest.kt$ForgotLockScreenViewModelTest.Arrangement$@MockK lateinit var validatePasswordUseCase: ValidatePasswordUseCase</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:InitialSyncViewModelTest.kt$InitialSyncViewModelTest.Arrangement$@MockK lateinit var userDataStore: UserDataStore</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:InitialSyncViewModelTest.kt$InitialSyncViewModelTest.Arrangement$@MockK lateinit var userDataStoreProvider: UserDataStoreProvider</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:LegalHoldDeactivatedViewModelTest.kt$LegalHoldDeactivatedViewModelTest$@Test fun givenAlreadyNotified_whenGettingState_thenStateShouldBeHidden()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:LegalHoldDeactivatedViewModelTest.kt$LegalHoldDeactivatedViewModelTest$@Test fun givenLegalHoldRequestReturnsFailure_whenGettingState_thenStateShouldBeHidden()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:LegalHoldDeactivatedViewModelTest.kt$LegalHoldDeactivatedViewModelTest$@Test fun givenSessionReturnsFailure_whenGettingState_thenStateShouldBeHidden()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:LegalHoldDeactivatedViewModelTest.kt$LegalHoldDeactivatedViewModelTest$@Test fun givenShouldNotify_whenDismissing_thenStateShouldBeChangedToHidden()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:LegalHoldDeactivatedViewModelTest.kt$LegalHoldDeactivatedViewModelTest$@Test fun givenShouldNotify_whenGettingState_thenStateShouldBeVisible()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:LegalHoldSubjectProfileDialog.kt$@Composable @PreviewMultipleThemes fun PreviewLegalHoldSubjectProfileSelfDialog()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:LegalHoldSubjectProfileDialog.kt$@Composable fun LegalHoldSubjectProfileSelfDialog(dialogDismissed: () -&gt; Unit)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:UriUtilTest.kt$UriUtilTest$@Test fun givenLinkWithoutParams_whenCallingFindParameterValue_thenReturnsParamValue()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val Chocolate = Color(0xFF622F00)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkAmber100 = Color(0xFFFFF6D4)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkAmber200 = Color(0xFFFFEEA8)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkAmber300 = Color(0xFFFFE57D)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkAmber400 = Color(0xFFFFDD51)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkAmber500 = Color(0xFFFFD426)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkAmber600 = Color(0xFFCCAA1E)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkAmber700 = Color(0xFF997F17)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkAmber800 = Color(0xFF66550F)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkAmber900 = Color(0xFF4D400B)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue100 = Color(0xFFDDEDFF)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue200 = Color(0xFFBBDBFF)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue300 = Color(0xFF98CAFF)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue400 = Color(0xFF76B8FF)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue500 = Color(0xFF54A6FF)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue600 = Color(0xFF4385CC)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue700 = Color(0xFF326499)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue800 = Color(0xFF224266)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue900 = Color(0xFF19324D)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen100 = Color(0xFFD6F8DE)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen200 = Color(0xFFACF1BD)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen300 = Color(0xFF83E99D)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen400 = Color(0xFF59E27C)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen500 = Color(0xFF30DB5B)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen600 = Color(0xFF26AF49)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen700 = Color(0xFF1D8337)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen800 = Color(0xFF135824)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen900 = Color(0xFF0E421B)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol100 = Color(0xFFDFFAFF)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol200 = Color(0xFFBEF5FF)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol300 = Color(0xFF9EF0FF)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol400 = Color(0xFF7DEBFF)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol500 = Color(0xFF5DE6FF)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol600 = Color(0xFF4AB8CC)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol700 = Color(0xFF388A99)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol800 = Color(0xFF255C66)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol900 = Color(0xFF1C454D)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple100 = Color(0xFFF8E9FF)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple200 = Color(0xFFF0D2FF)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple300 = Color(0xFFE9BCFF)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple400 = Color(0xFFE1A5FF)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple500 = Color(0xFFDA8FFF)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple600 = Color(0xFFAE72CC)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple700 = Color(0xFF835699)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple800 = Color(0xFF573966)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple900 = Color(0xFF412B4D)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed100 = Color(0xFFFFE4E2)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed200 = Color(0xFFFFC9C6)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed300 = Color(0xFFFFADA9)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed400 = Color(0xFFFF928D)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed500 = Color(0xFFFF7770)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed600 = Color(0xFFCC5F5A)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed700 = Color(0xFF994743)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed800 = Color(0xFF66302D)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed900 = Color(0xFF4D2422)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val Gray100 = Color(0xFF17181A)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val Gray20 = Color(0xFFEDEFF0)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val Gray30 = Color(0xFFE5E8EA)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val Gray40 = Color(0xFFDCE0E3)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val Gray50 = Color(0xFFCBCED1)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val Gray60 = Color(0xFF9FA1A7)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val Gray70 = Color(0xFF676B71)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val Gray80 = Color(0xFF54585F)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val Gray90 = Color(0xFF34373D)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val Gray95 = Color(0xFF26272C)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightAmber100 = Color(0xFFE5E0DA)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightAmber200 = Color(0xFFCCC1B5)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightAmber300 = Color(0xFFB2A38F)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightAmber400 = Color(0xFF99846A)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightAmber500 = Color(0xFF7F6545)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightAmber600 = Color(0xFF665137)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightAmber700 = Color(0xFF4C3D29)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightAmber800 = Color(0xFF4C3D29)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightAmber900 = Color(0xFF261E15)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue100 = Color(0xFFCDE1F4)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue200 = Color(0xFF9BC2E9)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue300 = Color(0xFF6AA4DE)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue400 = Color(0xFF3885D3)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue500 = Color(0xFF0667C8)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue600 = Color(0xFF0552A0)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue700 = Color(0xFF043E78)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue800 = Color(0xFF022950)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue900 = Color(0xFF021F3C)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen100 = Color(0xFFD2E5D7)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen200 = Color(0xFFA6CBAF)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen300 = Color(0xFF79B087)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen400 = Color(0xFF4D965F)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen500 = Color(0xFF207C37)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen550 = Color(0xFF1D7833)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen600 = Color(0xFF1A632C)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen700 = Color(0xFF134A21)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen800 = Color(0xFF0D3216)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen900 = Color(0xFF0A2511)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol100 = Color(0xFFCCE6EB)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol200 = Color(0xFF99CDD8)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol300 = Color(0xFF67B3C4)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol400 = Color(0xFF349AB1)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol500 = Color(0xFF01819D)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol600 = Color(0xFF01677E)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol700 = Color(0xFF014D5E)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol800 = Color(0xFF00343F)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol900 = Color(0xFF00272F)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple100 = Color(0xFFE7DAEE)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple200 = Color(0xFFD0B4DD)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple300 = Color(0xFFB88FCD)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple400 = Color(0xFFA169BC)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple500 = Color(0xFF8944AB)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple600 = Color(0xFF6E3689)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple700 = Color(0xFF522967)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple800 = Color(0xFF371B44)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple900 = Color(0xFF291433)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightRed100 = Color(0xFFF3CCD0)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightRed200 = Color(0xFFE799A1)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightRed300 = Color(0xFFDA6671)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightRed400 = Color(0xFFCE3342)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightRed500 = Color(0xFFC20013)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightRed600 = Color(0xFF9B000F)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightRed700 = Color(0xFF74000B)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightRed800 = Color(0xFF4E0008)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val LightRed900 = Color(0xFF3A0006)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val Orange = Color(0xFFFD8312)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val Pink = Color(0xFFEB239B)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WireColorPalette.kt$WireColorPalette$@Stable val Turquoise = Color(0xFF01718E)</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WirePrimaryIconButton.kt$@Preview @Composable fun PreviewWirePrimaryIconButtonLoading()</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:WirePrimaryIconButton.kt$@Preview @Composable fun PreviewWirePrimaryIconButtonRound()</ID>
    <ID>SpreadOperator:ViewModelScopedPreview.kt$ViewModelScopedPreviewProcessor$(aggregating = true, *items.mapNotNull { it.containingFile }.toTypedArray())</ID>
    <ID>SpreadOperator:ViewModelScopedPreview.kt$ViewModelScopedPreviewProcessor$(aggregating = true, *listOfNotNull(item.containingFile).toTypedArray())</ID>
    <ID>UnnecessaryParenthesesBeforeTrailingLambda:EndOngoingCallReceiver.kt$EndOngoingCallReceiver$()</ID>
    <ID>UnusedParameter:ExternalLoggerManager.kt$ExternalLoggerManager$context: Context</ID>
    <ID>UnusedParameter:TrackingNavController.kt$nameFromRoute: (String) -&gt; String?</ID>
    <ID>UnusedParameter:WireItemLabel.kt$minHeight: Dp = dimensions().badgeSmallMinSize.height</ID>
    <ID>UnusedParameter:WireItemLabel.kt$minWidth: Dp = dimensions().badgeSmallMinSize.height</ID>
    <ID>UnusedPrivateProperty:AndroidExampleView.kt$AndroidExampleView$private val view: View = View(context)</ID>
    <ID>UnusedPrivateProperty:SearchQueryStateFlow.kt$SearchQueryStateFlow$private val coroutineDispatcher: CoroutineDispatcher</ID>
    <ID>UnusedPrivateProperty:WireNotificationManagerTest.kt$WireNotificationManagerTest.Companion$private val TEST_SERVER_CONFIG: ServerConfig = newServerConfig(1)</ID>
    <ID>Wrapping:AddMembersToConversationViewModel.kt$AddMembersToConversationViewModel$(</ID>
    <ID>Wrapping:AssetImageFetcherTest.kt$AssetImageFetcherTest.Arrangement$( data = imageData, options ?: Options( context = mockContext, parameters = Parameters.Builder().set(key = OPTION_PARAMETER_RETRY_KEY, value = 0, memoryCacheKey = null).build() ) )</ID>
    <ID>Wrapping:AvatarPickerViewModelTest.kt$AvatarPickerViewModelTest.Arrangement$uploadUserAvatarUseCase(any(), any())</ID>
    <ID>Wrapping:ChangeEmailViewModel.kt$ChangeEmailViewModel$-&gt;</ID>
    <ID>Wrapping:ConversationInfoViewModel.kt$ConversationInfoViewModel$-&gt;</ID>
    <ID>Wrapping:ConversationMediaScreen.kt$ConversationMediaScreenTabItem.entries.size</ID>
    <ID>Wrapping:ConversationMediaScreen.kt$derivedStateOf { lazyListStates[currentTabState].topBarElevation(maxAppBarElevation) }</ID>
    <ID>Wrapping:ConversationMediaScreen.kt$lazyListStates[currentTabState].topBarElevation(maxAppBarElevation)</ID>
    <ID>Wrapping:ConversationMessagesViewModel.kt$ConversationMessagesViewModel$(</ID>
    <ID>Wrapping:ConversationScreen.kt${ /* do nothing */ }</ID>
    <ID>Wrapping:CreateAccountSummaryScreen.kt$navigator.navigate(NavigationCommand(CreateAccountUsernameScreenDestination, BackStackMode.CLEAR_WHOLE))</ID>
    <ID>Wrapping:DebugDataOptions.kt$(</ID>
    <ID>Wrapping:DeviceDetailsViewModel.kt$DeviceDetailsViewModel$-&gt;</ID>
    <ID>Wrapping:FeatureFlagNotificationViewModelTest.kt$FeatureFlagNotificationViewModelTest.Arrangement$coreLogic.getSessionScope(any()).markGuestLinkFeatureFlagAsNotChanged</ID>
    <ID>Wrapping:FileManager.kt$FileManager$context.getFileName(it)</ID>
    <ID>Wrapping:GroupConversationOptionsItem.kt$</ID>
    <ID>Wrapping:GroupConversationOptionsItem.kt$WireSecondaryButton(text = "Copy link", onClick = {}, modifier = Modifier.height(32.dp), fillMaxWidth = false)</ID>
    <ID>Wrapping:GroupOptionsScreen.kt$( title = stringResource(R.string.disable_guests_dialog_title), text = stringResource(R.string.disable_guests_dialog_description), onDismiss = onAllowGuestsDialogDismissed, buttonsHorizontalAlignment = false, optionButton1Properties = WireDialogButtonProperties( onClick = onNotAllowGuestsClicked, text = stringResource(id = R.string.disable_guests_dialog_button), type = WireDialogButtonType.Primary ), optionButton2Properties = WireDialogButtonProperties( text = stringResource(R.string.allow_guests), onClick = onAllowGuestsClicked, type = WireDialogButtonType.Primary ), dismissButtonProperties = WireDialogButtonProperties( text = stringResource(R.string.label_cancel), onClick = onAllowGuestsDialogDismissed ) )</ID>
    <ID>Wrapping:ImportMediaScreen.kt$(</ID>
    <ID>Wrapping:IncomingCallScreen.kt${ /* do nothing */ }</ID>
    <ID>Wrapping:LegalHoldRequestedViewModelTest.kt$LegalHoldRequestedViewModelTest$it.error shouldBeInstanceOf LegalHoldRequestedError.InvalidCredentialsError::class</ID>
    <ID>Wrapping:LegalHoldSubjectProfileDialog.kt$(</ID>
    <ID>Wrapping:LoginScreen.kt$TransitionAnimationType.SLIDE.enterTransition.togetherWith(TransitionAnimationType.SLIDE.exitTransition)</ID>
    <ID>Wrapping:MarkdownHelperTest.kt$MarkdownHelperTest$(</ID>
    <ID>Wrapping:MediaGalleryViewModelTest.kt$MediaGalleryViewModelTest.Arrangement$getConversationDetails(any())</ID>
    <ID>Wrapping:MessageDetailsScreen.kt$derivedStateOf { lazyListStates[currentTabState].topBarElevation(maxAppBarElevation) }</ID>
    <ID>Wrapping:MessageDetailsScreen.kt$lazyListStates[currentTabState].topBarElevation(maxAppBarElevation)</ID>
    <ID>Wrapping:MessageExpiration.kt$&lt;no name provided&gt;$( when (type) { StringResourceType.WEEKS -&gt; R.plurals.weeks_left StringResourceType.DAYS -&gt; R.plurals.days_left StringResourceType.HOURS -&gt; R.plurals.hours_left StringResourceType.MINUTES -&gt; R.plurals.minutes_left StringResourceType.SECONDS -&gt; R.plurals.seconds_left }, quantity, quantity )</ID>
    <ID>Wrapping:MessagePreviewContentMapper.kt$( userUIText, UIText.StringResource( if (isSelfMessage) R.string.last_message_self_user_shared_asset else R.string.last_message_other_user_shared_asset ) )</ID>
    <ID>Wrapping:MyAccountScreen.kt$(</ID>
    <ID>Wrapping:NewConversationViewModel.kt$NewConversationViewModel$(</ID>
    <ID>Wrapping:OngoingCallScreen.kt${ /* do nothing */ }</ID>
    <ID>Wrapping:OtherUserProfileState.kt$OtherUserProfileState$(</ID>
    <ID>Wrapping:RegularMessageContentMapper.kt$RegularMessageMapper$( if (message.isSelfMessage) { UIText.StringResource(messageResourceProvider.memberNameYouTitlecase) } else { sender?.name.orUnknownName() }, message.isSelfMessage )</ID>
    <ID>Wrapping:SelfDevicesScreen.kt$navigator.navigate(NavigationCommand(DeviceDetailsScreenDestination(viewModel.currentAccountId, it.clientId)))</ID>
    <ID>Wrapping:SendMessageViewModel.kt$SendMessageViewModel$(</ID>
    <ID>Wrapping:SendMessageViewModel.kt$SendMessageViewModel${ /* do nothing */ }</ID>
    <ID>Wrapping:SettingsScreen.kt$(</ID>
    <ID>Wrapping:SettingsScreen.kt${ isChecked -&gt; if (isChecked) homeStateHolder.navigator.navigate(NavigationCommand(SetLockCodeScreenDestination, BackStackMode.NONE)) else turnAppLockOffDialogState.show(Unit) }</ID>
    <ID>Wrapping:SystemMessageContentMapper.kt$SystemMessageContentMapper$UIText.DynamicString(it)</ID>
    <ID>Wrapping:TextWithLearnMore.kt$append("This is text with a learn more link")</ID>
    <ID>Wrapping:TypingIndicatorViewModelTest.kt$TypingIndicatorViewModelTest.Arrangement$savedStateHandle.scopedArgs&lt;TypingIndicatorArgs&gt;()</ID>
    <ID>Wrapping:UIMessage.kt$DeliveryStatusContent.PartialDelivery$failedRecipients.filter { it !in noClients.values.flatten() }.toImmutableList()</ID>
    <ID>Wrapping:UIMessage.kt$DeliveryStatusContent.PartialDelivery$it !in noClients.values.flatten()</ID>
    <ID>Wrapping:UIParticipantMapperTest.kt$UIParticipantMapperTest$(</ID>
    <ID>Wrapping:VerifyEmailViewModel.kt$VerifyEmailViewModel${ /*no-op*/ }</ID>
    <ID>Wrapping:WelcomeScreen.kt$(</ID>
    <ID>Wrapping:WireActivityDialogs.kt$(</ID>
    <ID>Wrapping:WireActivityViewModel.kt$WireActivityViewModel$-&gt;</ID>
    <ID>Wrapping:WireActivityViewModelTest.kt$WireActivityViewModelTest.Arrangement$observeIfE2EIRequiredDuringLoginUseCaseProviderFactory.create(any()).observeIfE2EIIsRequiredDuringLogin()</ID>
    <ID>Wrapping:WireButton.kt$(</ID>
    <ID>Wrapping:WireNotificationManagerTest.kt$WireNotificationManagerTest.Arrangement$markMessagesAsNotified(any&lt;MarkMessagesAsNotifiedUseCase.UpdateTarget.SingleConversation&gt;())</ID>
    <ID>Wrapping:WireTextFieldDefaults.kt$&lt;no name provided&gt;$(</ID>
  </CurrentIssues>
</SmellBaseline>
