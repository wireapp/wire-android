<?xml version="1.0" ?>
<!--
  ~ Wire
  ~ Copyright (C) 2023 Wire Swiss GmbH
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program. If not, see http://www.gnu.org/licenses/.
  ~
  ~
  -->

<SmellBaseline>
    <ManuallySuppressedIssues></ManuallySuppressedIssues>
    <CurrentIssues>
        <ID>CommentSpacing:com.wire.android.di.AuthServerConfigProvider.kt:32</ID>
        <ID>CommentSpacing:com.wire.android.navigation.NavigationManager.kt:58</ID>
        <ID>CommentSpacing:com.wire.android.ui.authentication.create.email.CreateAccountEmailScreen.kt:182</ID>
        <ID>CommentSpacing:com.wire.android.ui.authentication.login.sso.LoginSSOScreen.kt:142</ID>
        <ID>CommentSpacing:com.wire.android.ui.calling.ongoing.OngoingCallScreen.kt:214</ID>
        <ID>CommentSpacing:com.wire.android.ui.common.AddContactButton.kt:49</ID>
        <ID>CommentSpacing:com.wire.android.ui.home.HomeDrawer.kt:78</ID>
        <ID>CommentSpacing:com.wire.android.ui.home.HomeScreen.kt:210</ID>
        <ID>CommentSpacing:com.wire.android.ui.home.conversations.ConversationScreen.kt:248</ID>
        <ID>CommentSpacing:com.wire.android.ui.home.conversations.ConversationScreenState.kt:67</ID>
        <ID>CommentSpacing:com.wire.android.ui.home.conversationslist.common.RowItem.kt:39</ID>
        <ID>CommentSpacing:com.wire.android.ui.home.conversationslist.model.LastConversationEvent.kt:42</ID>
        <ID>CommentSpacing:com.wire.android.ui.home.newconversation.contacts.ContactsScreen.kt:109</ID>
        <ID>CommentSpacing:com.wire.android.ui.theme.ThemeUtils.kt:49</ID>
        <ID>CommentSpacing:com.wire.android.ui.theme.ThemeUtils.kt:50</ID>
        <ID>CommentSpacing:com.wire.android.ui.theme.ThemeUtils.kt:51</ID>
        <ID>CommentSpacing:com.wire.android.ui.theme.ThemeUtils.kt:52</ID>
        <ID>CommentSpacing:com.wire.android.ui.userprofile.self.SelfUserProfileViewModel.kt:252</ID>
        <ID>CommentSpacing:com.wire.android.util.debug.FeatureVisibilityFlags.kt:25</ID>
        <ID>CommentSpacing:com.wire.android.util.debug.FeatureVisibilityFlags.kt:28</ID>
        <ID>CommentSpacing:com.wire.android.util.debug.FeatureVisibilityFlags.kt:30</ID>
        <ID>CommentSpacing:com.wire.android.util.debug.FeatureVisibilityFlags.kt:31</ID>
        <ID>CommentSpacing:com.wire.android.util.debug.FeatureVisibilityFlags.kt:32</ID>
        <ID>CommentSpacing:com.wire.android.util.debug.FeatureVisibilityFlags.kt:33</ID>
        <ID>CommentSpacing:com.wire.android.util.debug.FeatureVisibilityFlags.kt:34</ID>
        <ID>CommentSpacing:com.wire.android.util.debug.FeatureVisibilityFlags.kt:35</ID>
        <ID>CommentSpacing:com.wire.android.util.debug.FeatureVisibilityFlags.kt:36</ID>
        <ID>CommentSpacing:com.wire.android.util.debug.FeatureVisibilityFlags.kt:37</ID>
        <ID>CommentSpacing:com.wire.android.util.debug.FeatureVisibilityFlags.kt:38</ID>
        <ID>CommentSpacing:com.wire.android.util.debug.FeatureVisibilityFlags.kt:39</ID>
        <ID>CommentSpacing:com.wire.android.util.debug.FeatureVisibilityFlags.kt:40</ID>
        <ID>CommentSpacing:com.wire.android.util.debug.FeatureVisibilityFlags.kt:41</ID>
        <ID>CommentSpacing:com.wire.android.util.debug.FeatureVisibilityFlags.kt:42</ID>
        <ID>CommentSpacing:com.wire.android.util.debug.FeatureVisibilityFlags.kt:43</ID>
        <ID>CommentSpacing:com.wire.android.util.debug.FeatureVisibilityFlags.kt:44</ID>
        <ID>LibraryCodeMustSpecifyReturnType:AccountSwitchUseCase.kt$AccountSwitchUseCase$val currentAccount get() = when (val result = getCurrentSession()) { is CurrentSessionResult.Failure.Generic -&gt; null CurrentSessionResult.Failure.SessionNotFound -&gt; null is CurrentSessionResult.Success -&gt; result.accountInfo }</ID>
        <ID>LibraryCodeMustSpecifyReturnType:AppModule.kt$AppModule$@ExperimentalMaterial3Api @Singleton @Provides fun provideNavigationManager()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:AppModule.kt$AppModule$@Singleton @Provides fun providesApplicationContext(@ApplicationContext appContext: Context)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:AvatarPickerViewModel.kt$AvatarPickerViewModel$fun navigateBack()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:AvatarPickerViewModel.kt$AvatarPickerViewModel$fun updatePickedAvatarUri(updatedUri: Uri)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:AvatarPickerViewModel.kt$AvatarPickerViewModel$val infoMessage = _infoMessage.asSharedFlow()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:AvatarPickerViewModel.kt$AvatarPickerViewModel$var pictureState by mutableStateOf&lt;PictureState&gt;(PictureState.Empty) private set</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreState.kt$BackupAndRestoreState.Companion$val INITIAL_STATE = BackupAndRestoreState( backupRestoreProgress = BackupRestoreProgress.InProgress(), restoreFileValidation = RestoreFileValidation.Initial, backupCreationProgress = BackupCreationProgress.InProgress(), restorePasswordValidation = PasswordValidation.NotVerified, backupCreationPasswordValidation = PasswordValidation.Valid, )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModel.kt$BackupAndRestoreViewModel$fun cancelBackupCreation()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModel.kt$BackupAndRestoreViewModel$fun chooseBackupFileToRestore(uri: Uri)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModel.kt$BackupAndRestoreViewModel$fun createBackup(password: String)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModel.kt$BackupAndRestoreViewModel$fun navigateBack()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModel.kt$BackupAndRestoreViewModel$fun restorePasswordProtectedBackup(restorePassword: String)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModel.kt$BackupAndRestoreViewModel$fun saveBackup()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModel.kt$BackupAndRestoreViewModel$var state by mutableStateOf(BackupAndRestoreState.INITIAL_STATE)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CommonTopAppBarViewModel.kt$CommonTopAppBarViewModel$var connectivityState by mutableStateOf(ConnectivityUIState(ConnectivityUIState.Info.None))</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConnectionLabel.kt$@Composable fun getConnectionStringLabel(@StringRes labelId: Int)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationBannerViewModel.kt$ConversationBannerViewModel$var bannerState by mutableStateOf&lt;UIText?&gt;(null)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationCallViewModel.kt$ConversationCallViewModel$var conversationCallViewState by mutableStateOf(ConversationCallViewState()) private set</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationInfoViewModel.kt$ConversationInfoViewModel$fun navigateToDetails()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationInfoViewModel.kt$ConversationInfoViewModel$var conversationInfoViewState by mutableStateOf(ConversationInfoViewState())</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationItem.kt$ConversationItem$val isTeamConversation get() = teamId != null</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationItem.kt$fun ConversationItem.ConnectionConversation.toUserInfoLabel()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationItem.kt$fun ConversationItem.PrivateConversation.toUserInfoLabel()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationListViewModel.kt$ConversationListViewModel$val closeBottomSheet = MutableSharedFlow&lt;Unit&gt;()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationListViewModel.kt$ConversationListViewModel$val homeSnackBarState = MutableSharedFlow&lt;HomeSnackbarState&gt;()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationListViewModel.kt$ConversationListViewModel$var conversationListState by mutableStateOf(ConversationListState()) private set</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMemberExt.kt$fun DetailedReceipt.previewAsset( wireSessionImageLoader: WireSessionImageLoader )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMemberExt.kt$fun MessageReaction.previewAsset( wireSessionImageLoader: WireSessionImageLoader )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMemberExt.kt$val MemberDetails.handle get() = this.user.handle</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMemberExt.kt$val MemberDetails.name get() = this.user.name</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMemberExt.kt$val MemberDetails.userId get() = this.user.id</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModel.kt$ConversationMessagesViewModel$// This will download the asset remotely to an internal temporary storage or fetch it from the local database if it had been previously // downloaded. After doing so, a dialog is shown to ask the user whether he wants to open the file or download it to external storage fun downloadOrFetchAssetToInternalStorage(messageId: String)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModel.kt$ConversationMessagesViewModel$fun onSnackbarMessage(type: SnackBarMessage)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModel.kt$ConversationMessagesViewModel$val infoMessage = _infoMessage.asSharedFlow()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModel.kt$ConversationMessagesViewModel$var conversationViewState by mutableStateOf(ConversationMessagesViewState())</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationScreenState.kt$ConversationScreenState$val isMyMessage get() = selectedMessage?.messageSource == MessageSource.Self</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationScreenState.kt$ConversationScreenState$val isTextMessage get() = selectedMessage?.messageContent is UIMessageContent.TextMessage</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationScreenState.kt$ConversationScreenState$var selectedMessage by mutableStateOf&lt;UIMessage?&gt;(null)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationSheetState.kt$ConversationSheetState$val startOptionNavigation = conversationOptionNavigation</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$ConnectionModule$@ViewModelScoped @Provides fun provideAcceptConnectionRequestUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$ConnectionModule$@ViewModelScoped @Provides fun provideCancelConnectionRequestUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$ConnectionModule$@ViewModelScoped @Provides fun provideIgnoreConnectionRequestUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$ConnectionModule$@ViewModelScoped @Provides fun provideSendConnectionRequestUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$CoreLogicModule$@Provides fun deleteSessionUseCase(@KaliumCoreLogic coreLogic: CoreLogic)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$CoreLogicModule$@Provides fun provideCurrentSessionUseCase(@KaliumCoreLogic coreLogic: CoreLogic)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$CoreLogicModule$@Singleton @Provides fun provideWorkManager(@ApplicationContext applicationContext: Context)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$ServiceModule$@ServiceScoped @Provides @CurrentSessionFlowService fun provideCurrentSessionFlowUseCase(@KaliumCoreLogic coreLogic: CoreLogic)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$SessionModule$@ViewModelScoped @Provides fun provideCurrentAccountUserDataStore(@CurrentAccount currentAccount: UserId, userDataStoreProvider: UserDataStoreProvider)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideAcceptCallUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideCreateBackupUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideCurrentSessionFlowUseCase(@KaliumCoreLogic coreLogic: CoreLogic)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideDeleteClientUseCase(@CurrentAccount currentAccount: UserId, clientScopeProviderFactory: ClientScopeProvider.Factory)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideDeleteTeamConversationUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideEnableLoggingUseCase(@KaliumCoreLogic coreLogic: CoreLogic)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideFetchApiVersionUserCase(@KaliumCoreLogic coreLogic: CoreLogic)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideFileSharingStatusFlowUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideGetBuildConfigUseCase(@KaliumCoreLogic coreLogic: CoreLogic)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideGetIncomingCallsUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideGetOrRegisterClientUseCase(@CurrentAccount currentAccount: UserId, clientScopeProviderFactory: ClientScopeProvider.Factory)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideGetOtherUsersClients(@CurrentAccount currentAccount: UserId, clientScopeProviderFactory: ClientScopeProvider.Factory)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideGetPaginatedMessagesUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideGetPersistentWebSocketStatusUseCase( @KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideGetServerConfigUserCase(@KaliumCoreLogic coreLogic: CoreLogic)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideIsCallRunningUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideIsEligibleToStartCall(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideIsFileSharingEnabledUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideIsLastCallClosedUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideIsMLSEnabledUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideLoggingUseCase(@KaliumCoreLogic coreLogic: CoreLogic)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideMarkMessagesAsNotifiedUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideMembersToMentionUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideMlsKeyPackageCountUseCase(@CurrentAccount currentAccount: UserId, clientScopeProviderFactory: ClientScopeProvider.Factory)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideNeedsToRegisterClientUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideObserveConversationDetailsUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideObserveConversationInteractionAvailability(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideObserveConversationListDetails(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideObserveConversationMembersUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideObserveConversationUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideObserveIfAppFreshEnoughUseCase(@KaliumCoreLogic coreLogic: CoreLogic)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideObserveIsSelfConversationMemberUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideObserveOngoingCallsUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideObservePersistentWebSocketConnectionStatusUseCase( @KaliumCoreLogic coreLogic: CoreLogic )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideObserveReadReceiptsEnabled(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideObserveServerConfigUseCase(@KaliumCoreLogic coreLogic: CoreLogic)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideObserveSyncStateUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun providePersistOtherUsersClients(@CurrentAccount currentAccount: UserId, clientScopeProviderFactory: ClientScopeProvider.Factory)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun providePersistPersistentWebSocketConnectionStatusUseCase( @KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun providePersistReadReceiptsStatusConfig(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideRejectCallUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideRenameConversation(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideRequestVideoStreamsUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideRestartSlowSyncProcessForRecoveryUseCase( @CurrentAccount currentAccount: UserId, clientScopeProviderFactory: ClientScopeProvider.Factory )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideRestoreBackupUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideSelfClientsUseCase(@CurrentAccount currentAccount: UserId, clientScopeProviderFactory: ClientScopeProvider.Factory)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideSetUserHandleUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideUpdateApiVersionsScheduler(@KaliumCoreLogic coreLogic: CoreLogic)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideUpdateApiVersionsUseCase(@KaliumCoreLogic coreLogic: CoreLogic)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideUpdateAssetMessageDownloadStatusUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideUpdateSelfAvailabilityStatusUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideUploadUserAvatarUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideValidateEmailUseCase(@KaliumCoreLogic coreLogic: CoreLogic)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideValidatePasswordUseCase(@KaliumCoreLogic coreLogic: CoreLogic)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideValidateUserHandleUseCase(@KaliumCoreLogic coreLogic: CoreLogic)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CoreLogicModule.kt$UseCaseModule$@ViewModelScoped @Provides fun provideVerifyBackupUseCase(@KaliumCoreLogic coreLogic: CoreLogic, @CurrentAccount currentAccount: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CreateAccountDetailsViewModel.kt$CreateAccountDetailsViewModel.Companion$const val EMAIL = "email"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CreateAccountFlowType.kt$CreateAccountFlowType.Companion$fun fromRouteArg(routeArg: String?)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CreateBackupDialogStateHolder.kt$CreateBackupDialogStateHolder.Companion$val INITIAL_STEP = BackUpDialogStep.SetPassword</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CreatePersonalAccountViewModel.kt$CreatePersonalAccountViewModel$var moveBack = MutableSharedFlow&lt;Unit&gt;()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CreatePersonalAccountViewModel.kt$CreatePersonalAccountViewModel$var moveToStep = MutableSharedFlow&lt;CreatePersonalAccountNavigationItem&gt;()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CreateTeamViewModel.kt$CreateTeamViewModel$var moveBack = MutableSharedFlow&lt;Unit&gt;()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CreateTeamViewModel.kt$CreateTeamViewModel$var moveToStep = MutableSharedFlow&lt;CreateTeamNavigationItem&gt;()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CurrentScreenManager.kt$CurrentScreen.Companion$val qualifiedIdMapper = QualifiedIdMapperImpl(null)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DebugScreenViewModel.kt$DebugScreenViewModel$fun navigateBack()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DebugScreenViewModel.kt$DebugScreenViewModel$var state by mutableStateOf( DebugScreenState( isLoggingEnabled = isLoggingEnabledUseCase() ) )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$DeepLinkProcessor.Companion$const val ACCESS_DEEPLINK_HOST = "access"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$DeepLinkProcessor.Companion$const val CONVERSATION_DEEPLINK_HOST = "conversation"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$DeepLinkProcessor.Companion$const val DEEP_LINK_SCHEME = "wire"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$DeepLinkProcessor.Companion$const val INCOMING_CALL_DEEPLINK_HOST = "incoming-call"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$DeepLinkProcessor.Companion$const val ONGOING_CALL_DEEPLINK_HOST = "ongoing-call"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$DeepLinkProcessor.Companion$const val OTHER_USER_PROFILE_DEEPLINK_HOST = "other-user-profile"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$DeepLinkProcessor.Companion$const val SERVER_CONFIG_PARAM = "config"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$DeepLinkProcessor.Companion$const val SSO_LOGIN_COOKIE_PARAM = "cookie"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$DeepLinkProcessor.Companion$const val SSO_LOGIN_DEEPLINK_HOST = "sso-login"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$DeepLinkProcessor.Companion$const val SSO_LOGIN_ERROR_PARAM = "error"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$DeepLinkProcessor.Companion$const val SSO_LOGIN_FAILURE = "failure"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$DeepLinkProcessor.Companion$const val SSO_LOGIN_SERVER_CONFIG_PARAM = "location"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$DeepLinkProcessor.Companion$const val SSO_LOGIN_SUCCESS = "success"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$DeepLinkProcessor.Companion$const val SSO_LOGIN_USERID_PARAM = "userId"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$SSOFailureCodes.Companion$fun getByCode(errorCode: Int)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$SSOFailureCodes.Companion$fun getByLabel(label: String)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$SSOFailureCodes.SSOServerErrorCode$@VisibleForTesting const val UNKNOWN = 0</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$SSOFailureCodes.SSOServerErrorCode$const val BAD_FAILURE_REDIRECT = 3</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$SSOFailureCodes.SSOServerErrorCode$const val BAD_SUCCESS_REDIRECT = 2</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$SSOFailureCodes.SSOServerErrorCode$const val BAD_UPSTREAM = 5</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$SSOFailureCodes.SSOServerErrorCode$const val BAD_USERNAME = 4</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$SSOFailureCodes.SSOServerErrorCode$const val FORBIDDEN = 8</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$SSOFailureCodes.SSOServerErrorCode$const val INSUFFICIENT_PERMISSIONS = 10</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$SSOFailureCodes.SSOServerErrorCode$const val NOT_FOUND = 7</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$SSOFailureCodes.SSOServerErrorCode$const val NO_MATCHING_AUTH_REQ = 9</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$SSOFailureCodes.SSOServerErrorCode$const val SERVER_ERROR = 6</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessor.kt$SSOFailureCodes.SSOServerErrorCode$const val SERVER_ERROR_UNSUPPORTED_SAML = 1</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DispatcherProvider.kt$DefaultDispatcherProvider$override fun default()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DispatcherProvider.kt$DefaultDispatcherProvider$override fun io()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DispatcherProvider.kt$DefaultDispatcherProvider$override fun main()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DispatcherProvider.kt$DefaultDispatcherProvider$override fun unconfined()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:EditConversationMetadataViewModel.kt$EditConversationMetadataViewModel$var editConversationState by mutableStateOf(GroupMetadataState(mode = GroupNameMode.EDITION)) private set</ID>
        <ID>LibraryCodeMustSpecifyReturnType:Extensions.kt$@Composable fun Modifier.shimmerPlaceholder( visible: Boolean, color: Color = MaterialTheme.wireColorScheme.background, shimmerColor: Color = MaterialTheme.wireColorScheme.surface, shape: Shape = RoundedCornerShape(MaterialTheme.wireDimensions.placeholderShimmerCornerSize) )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:Extensions.kt$@OptIn(ExperimentalFoundationApi::class) @Composable fun Modifier.clickable(clickable: Clickable?)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FeatureFlagNotificationViewModel.kt$FeatureFlagNotificationViewModel$var featureFlagState by mutableStateOf(FeatureFlagState()) private set</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FeatureVisibilityFlags.kt$FeatureVisibilityFlags$const val AppSettings = false</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FeatureVisibilityFlags.kt$FeatureVisibilityFlags$const val AudioMessagesIcon = false</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FeatureVisibilityFlags.kt$FeatureVisibilityFlags$const val BackUpSettings = true</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FeatureVisibilityFlags.kt$FeatureVisibilityFlags$const val ConversationSearchIcon = false</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FeatureVisibilityFlags.kt$FeatureVisibilityFlags$const val EmojiIcon = false</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FeatureVisibilityFlags.kt$FeatureVisibilityFlags$const val GifIcon = false</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FeatureVisibilityFlags.kt$FeatureVisibilityFlags$const val MessageEditIcon = false</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FeatureVisibilityFlags.kt$FeatureVisibilityFlags$const val PingIcon = false</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FeatureVisibilityFlags.kt$FeatureVisibilityFlags$const val RichTextIcon = false</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FeatureVisibilityFlags.kt$FeatureVisibilityFlags$const val ShareLocationIcon = false</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FeatureVisibilityFlags.kt$FeatureVisibilityFlags$const val UserProfileEditIcon = false</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FeatureVisibilityFlags.kt$val LocalFeatureVisibilityFlags = staticCompositionLocalOf { FeatureVisibilityFlags }</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FileUtil.kt$fun Context.getProviderAuthority()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:Flow.kt$fun intervalFlow(periodMs: Long, initialDelayMs: Long = 0L, stopWhen: () -&gt; Boolean = { false })</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsBottomSheetEventsHandler.kt$GroupConversationDetailsBottomSheetEventsHandler.Companion$@Suppress("TooManyFunctions") val PREVIEW = object : GroupConversationDetailsBottomSheetEventsHandler { override fun onMutingConversationStatusChange(conversationId: ConversationId?, status: MutedConversationStatus) {} override fun onAddConversationToFavourites(conversationId: ConversationId?) {} override fun onMoveConversationToFolder(conversationId: ConversationId?) {} override fun onMoveConversationToArchive(conversationId: ConversationId?) {} override fun onClearConversationContent(conversationId: DialogState) {} }</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsViewModel.kt$GroupConversationDetailsViewModel$fun navigateToAddParticipants()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsViewModel.kt$GroupConversationDetailsViewModel$fun navigateToFullParticipantsList()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsViewModel.kt$GroupConversationDetailsViewModel.Companion$const val MAX_NUMBER_OF_PARTICIPANTS = 4</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationParticipantList.kt$fun LazyListScope.folderWithElements( header: String, items: List&lt;UIParticipant&gt;, onRowItemClicked: (UIParticipant) -&gt; Unit, showRightArrow: Boolean = true )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationParticipantsState.kt$GroupConversationParticipantsState.Companion$val PREVIEW = GroupConversationParticipantsState( data = ConversationParticipantsData( admins = listOf(UIParticipant(UserId("0", ""), "name", "handle", true)), participants = listOf(UIParticipant(UserId("1", ""), "name", "handle", false)), allAdminsCount = 1, allParticipantsCount = 1, isSelfAnAdmin = true ) )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationParticipantsViewModel.kt$GroupConversationParticipantsViewModel$fun navigateBack()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationParticipantsViewModel.kt$GroupConversationParticipantsViewModel$fun openProfile(participant: UIParticipant)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationParticipantsViewModel.kt$GroupConversationParticipantsViewModel$open val maxNumberOfItems get() = -1 // -1 means return whole list</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupDetailsBaseViewModel.kt$GroupDetailsBaseViewModel$val snackBarMessage = _snackBarMessenger.asSharedFlow()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupNameValidator.kt$GroupNameValidator$fun onGroupNameErrorAnimated(currentGroupState: GroupMetadataState)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:HomeDrawer.kt$@ExperimentalAnimationApi @ExperimentalMaterialApi @ExperimentalMaterial3Api fun Any.route()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:HomeNavigation.kt$HomeNavigationItem.Companion$// TODO uncomment when CallsScreen and MentionScreen will be implemented // val bottomTabItems = listOf(Conversations, Calls, Mentions) val bottomTabItems = listOf&lt;HomeNavigationItem&gt;()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:HomeStateHolder.kt$HomeStateHolder$fun isBottomSheetVisible()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:HomeViewModel.kt$HomeViewModel$fun navigateToSelfUserProfile()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:HomeViewModel.kt$HomeViewModel$var homeState by mutableStateOf( HomeState( logFilePath = logFileWriter.activeLoggingFile.absolutePath ) ) private set</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ImageAsset.kt$ImageAsset$@Composable fun paint(fallbackData: Any? = null)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ImageLoadingModule.kt$ImageLoadingModule$// For better performance/caching. We shouldn't create many of these ImageLoaders. @Provides fun provideWireImageLoader(imageLoaderFactory: WireSessionImageLoader.Factory)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ImageUtil.kt$const val DEFAULT_FILE_MIME_TYPE = "file/*"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:InitialSyncViewModel.kt$InitialSyncViewModel$@VisibleForTesting fun navigateToConvScreen()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:InitiatingCallViewModel.kt$InitiatingCallViewModel$fun hangUpCall()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:InitiatingCallViewModel.kt$InitiatingCallViewModel$fun navigateBack()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LogFileWriter.kt$LogFileWriter$val activeLoggingFile = File(logsDirectory, ACTIVE_LOGGING_FILE_NAME)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginSSOViewModel.kt$LoginSSOViewModel$fun handleSSOResult(ssoLoginResult: DeepLinkResult.SSOLogin?)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginSSOViewModel.kt$LoginSSOViewModel$var openWebUrl = MutableSharedFlow&lt;String&gt;()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginState.kt$fun LoginState.updateEmailLoginEnabled()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginState.kt$fun LoginState.updateSSOLoginEnabled()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginViewModel.kt$LoginViewModel$@VisibleForTesting fun navigateAfterRegisterClientSuccess(userId: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginViewModel.kt$LoginViewModel$fun navigateBack()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginViewModel.kt$LoginViewModel$val serverConfig = authServerConfigProvider.authServer.value</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginViewModel.kt$LoginViewModel$var loginState by mutableStateOf( LoginState( ssoCode = TextFieldValue(savedStateHandle[SSO_CODE_SAVED_STATE_KEY] ?: String.EMPTY), userIdentifier = TextFieldValue(savedStateHandle[USER_IDENTIFIER_SAVED_STATE_KEY] ?: String.EMPTY), password = TextFieldValue(String.EMPTY), isProxyAuthRequired = if (serverConfig.apiProxy?.needsAuthentication != null) serverConfig.apiProxy?.needsAuthentication!! else false, isProxyEnabled = serverConfig.apiProxy != null ) ) protected set</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginViewModel.kt$LoginViewModel.Companion$const val SSO_CODE_SAVED_STATE_KEY = "sso_code"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginViewModel.kt$LoginViewModel.Companion$const val USER_IDENTIFIER_SAVED_STATE_KEY = "user_identifier"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginViewModel.kt$fun AuthenticationResult.Failure.toLoginError()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginViewModel.kt$fun RegisterClientResult.Failure.toLoginError()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MediaGalleryViewModel.kt$MediaGalleryViewModel$val deleteMessageHelper = DeleteMessageDialogHelper( viewModelScope, imageAssetId.conversationId, ::updateDeleteDialogState ) { messageId, deleteForEveryone -&gt; deleteMessage(conversationId = imageAssetId.conversationId, messageId = messageId, deleteForEveryone = deleteForEveryone) .onFailure { onSnackbarMessage(MediaGallerySnackbarMessages.DeletingMessageError) } .onSuccess { navigateBack() } }</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MediaGalleryViewModel.kt$MediaGalleryViewModel$val snackbarMessage = _snackbarMessage.asSharedFlow()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MediaGalleryViewModel.kt$MediaGalleryViewModel$var mediaGalleryViewState by mutableStateOf(MediaGalleryViewState()) private set</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposer.kt$KeyboardHeight.Companion$val DEFAULT_KEYBOARD_TOP_SCREEN_OFFSET = 250.dp</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerState.kt$AttachmentInnerState$var attachmentState by mutableStateOf&lt;AttachmentState&gt;(AttachmentState.NotPicked)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerState.kt$MessageComposeInputState$fun copyCurrent(messageText: TextFieldValue = this.messageText, inputFocused: Boolean = this.inputFocused)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerState.kt$MessageComposeInputState$fun toActive(messageText: TextFieldValue = this.messageText, inputFocused: Boolean = this.inputFocused)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerState.kt$MessageComposeInputState$fun toInactive(messageText: TextFieldValue = this.messageText, inputFocused: Boolean = this.inputFocused)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerState.kt$MessageComposerInnerState$fun hideAttachmentOptions()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerState.kt$MessageComposerInnerState$fun showAttachmentOptions()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerState.kt$MessageComposerInnerState$var mentions by mutableStateOf(listOf&lt;UiMention&gt;())</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerState.kt$UiMention$fun intoMessageMention()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModel.kt$MessageComposerViewModel$fun onSnackbarMessage(type: SnackBarMessage)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModel.kt$MessageComposerViewModel$fun showDeleteMessageDialog(messageId: String, isMyMessage: Boolean)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModel.kt$MessageComposerViewModel$val deleteMessageHelper = DeleteMessageDialogHelper( viewModelScope, conversationId, ::updateDeleteDialogState ) { messageId, deleteForEveryone -&gt; deleteMessage(conversationId = conversationId, messageId = messageId, deleteForEveryone = deleteForEveryone) .onFailure { onSnackbarMessage(ErrorDeletingMessage) } }</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModel.kt$MessageComposerViewModel$val infoMessage = _infoMessage.asSharedFlow()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModel.kt$MessageComposerViewModel$var conversationViewState by mutableStateOf(ConversationViewState()) private set</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModel.kt$MessageComposerViewModel$var interactionAvailability by mutableStateOf(InteractionAvailability.ENABLED)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModel.kt$MessageComposerViewModel$var mentionsToSelect by mutableStateOf&lt;List&lt;Contact&gt;&gt;(listOf())</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModel.kt$MessageComposerViewModel.Companion$const val ASSET_SIZE_DEFAULT_LIMIT_BYTES = 25 * 1024 * 1024 // 25 MB asset default user limit size</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModel.kt$MessageComposerViewModel.Companion$const val ASSET_SIZE_TEAM_USER_LIMIT_BYTES = 100 * 1024 * 1024 // 100 MB asset team user limit size</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModel.kt$MessageComposerViewModel.Companion$const val IMAGE_SIZE_LIMIT_BYTES = 15 * 1024 * 1024 // 15 MB limit for images</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageContentMapper.kt$AssetMessageContentMetadata$val imgHeight get() = when (val md = assetMessageContent.metadata) { is AssetContent.AssetMetadata.Image -&gt; md.height else -&gt; 0 }</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageContentMapper.kt$AssetMessageContentMetadata$val imgWidth get() = when (val md = assetMessageContent.metadata) { is AssetContent.AssetMetadata.Image -&gt; md.width else -&gt; 0 }</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageContentMapper.kt$MessageContentMapper$fun toText(conversationId: ConversationId, content: MessageContent)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageDetailsViewModel.kt$MessageDetailsViewModel$fun navigateBack()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrateClientsDataUseCase.kt$MigrateClientsDataUseCase.Companion$const val SESSION_USER_IDS_CHUNK_SIZE = 500</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrateClientsDataUseCase.kt$MigrateClientsDataUseCase.Companion$const val SYNC_START_TIMEOUT = 20_000L</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrationManager.kt$MigrationResult.Failure.Companion$const val KEY_FAILURE_TYPE = "failure_type"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrationMapper.kt$MigrationMapper$@Suppress("ComplexMethod") fun fromScalaUserToUser(scalaUserData: ScalaUserData, selfUserId: String, selfUserDomain: String?, selfUserTeamId: String?)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrationMapper.kt$MigrationMapper$fun fromScalaConversationToConversation(scalaConversation: ScalaConversationData)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrationMapper.kt$MigrationMapper$fun fromScalaMessageToMessage(scalaMessage: ScalaMessageData, scalaSenderUserData: ScalaUserData)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrationWorker.kt$MigrationWorker.Companion$const val NAME = "migration"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:Mock.kt$@Suppress("MagicNumber") fun mockedImageUIMessage(uploadStatus: Message.UploadStatus = Message.UploadStatus.UPLOADED)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:Mock.kt$@Suppress("MagicNumber") fun mockedImg( uploadStatus: Message.UploadStatus = Message.UploadStatus.UPLOADED, downloadStatus: Message.DownloadStatus = Message.DownloadStatus.SAVED_INTERNALLY )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:Mock.kt$fun mockAssetMessage(uploadStatus: Message.UploadStatus = Message.UploadStatus.UPLOADED)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:Mock.kt$val mockFooter = MessageFooter("", mapOf("👍" to 1), setOf("👍"))</ID>
        <ID>LibraryCodeMustSpecifyReturnType:Mock.kt$val mockImageLoader = WireSessionImageLoader(object : ImageLoader { override val components: ComponentRegistry get() = TODO("Not yet implemented") override val defaults: DefaultRequestOptions get() = TODO("Not yet implemented") override val diskCache: DiskCache get() = TODO("Not yet implemented") override val memoryCache: MemoryCache get() = TODO("Not yet implemented") override fun enqueue(request: ImageRequest): Disposable = TODO("Not yet implemented") override suspend fun execute(request: ImageRequest): ImageResult = TODO("Not yet implemented") override fun newBuilder(): ImageLoader.Builder = TODO("Not yet implemented") override fun shutdown() = TODO("Not yet implemented") })</ID>
        <ID>LibraryCodeMustSpecifyReturnType:Mock.kt$val mockMessageWithText = UIMessage( userAvatarData = UserAvatarData(null, UserAvailabilityStatus.AVAILABLE), messageHeader = MessageHeader( username = UIText.DynamicString("John Doe"), membership = Membership.Guest, isLegalHold = true, messageTime = MessageTime("12.23pm"), messageStatus = MessageStatus.Untouched, messageId = "", connectionState = ConnectionState.ACCEPTED, isSenderDeleted = false, isSenderUnavailable = false ), messageContent = UIMessageContent.TextMessage( messageBody = MessageBody( UIText.DynamicString( "This is some test message that is very very" + "very very very very" + " very very very" + "very very very very very long" ) ) ), messageSource = MessageSource.Self, messageFooter = mockFooter )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MyAccountViewModel.kt$MyAccountViewModel$fun navigateBack()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MyAccountViewModel.kt$MyAccountViewModel$var myAccountState by mutableStateOf(MyAccountState()) private set</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItem$ @PackagePrivate fun getCanonicalRoute()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val ADD_CONVERSATION_PARTICIPANTS = "add_conversation_participants"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val APP_SETTINGS = "app_settings_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val BACKUP_AND_RESTORE = "backup_and_restore_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val CONVERSATION = "detailed_conversation_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val CREATE_ACCOUNT_SUMMARY = "create_account_summary_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val CREATE_ACCOUNT_USERNAME = "create_account_username_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val CREATE_PERSONAL_ACCOUNT = "create_personal_account_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val CREATE_TEAM = "create_team_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val DEBUG = "debug_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val EDIT_CONVERSATION_NAME = "edit_conversation_name_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val EDIT_DISPLAY_NAME = "edit_display_name_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val GROUP_CONVERSATION_ALL_PARTICIPANTS = "group_conversation_all_participants_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val GROUP_CONVERSATION_DETAILS = "group_conversation_details_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val HOME = "home_landing_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val IMAGE_PICKER = "image_picker_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val INCOMING_CALL = "incoming_call_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val INITIAL_SYNC = "initial_sync_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val INITIATING_CALL = "initiating_call_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val LOGIN = "login_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val MEDIA_GALLERY = "media_gallery"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val MESSAGE_DETAILS = "message_details_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val MIGRATION = "migration_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val MY_ACCOUNT = "my_account_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val NETWORK_SETTINGS = "network_settings_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val NEW_CONVERSATION = "new_conversation_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val ONGOING_CALL = "ongoing_call_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val OTHER_USER_PROFILE = "other_user_profile_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val PRIVACY_SETTINGS = "privacy_settings"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val REGISTER_DEVICE = "register_device_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val REMOVE_DEVICES = "remove_devices_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val SELF_DEVICES = "self_devices_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val SELF_USER_PROFILE = "self_user_profile_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$NavigationItemDestinationsRoutes$const val WELCOME = "welcome_screen"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$const val EXTRA_BACK_NAVIGATION_ARGUMENTS = "extra_back_navigation_arguments"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$const val EXTRA_CONNECTION_IGNORED_USER_NAME = "extra_connection_ignored_user_name"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$const val EXTRA_CONVERSATION_ID = "extra_conversation_id"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$const val EXTRA_CREATE_ACCOUNT_FLOW_TYPE = "extra_create_account_flow_type"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$const val EXTRA_GROUP_DELETED_NAME = "extra_group_deleted_name"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$const val EXTRA_GROUP_NAME_CHANGED = "extra_group_name_changed"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$const val EXTRA_IMAGE_DATA = "extra_image_data"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$const val EXTRA_IS_SELF_MESSAGE = "extra_is_self_message"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$const val EXTRA_LEFT_GROUP = "extra_left_group"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$const val EXTRA_MESSAGE_ID = "extra_message_id"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$const val EXTRA_MESSAGE_TO_DELETE_ID = "extra_message_to_delete"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$const val EXTRA_MESSAGE_TO_DELETE_IS_SELF = "extra_message_to_delete_is_self"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$const val EXTRA_SETTINGS_DISPLAY_NAME_CHANGED = "extra_settings_display_name_changed"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$const val EXTRA_USER_DOMAIN = "extra_user_domain"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$const val EXTRA_USER_ID = "extra_user_id"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationItem.kt$fun NavigationItem.isExternalRoute()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationManager.kt$NavigationManager$var navigateBack = MutableSharedFlow&lt;Map&lt;String, Any&gt;&gt;()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NavigationManager.kt$NavigationManager$var navigateState = MutableSharedFlow&lt;NavigationCommand?&gt;()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NetworkSettingsViewModel.kt$NetworkSettingsViewModel$fun navigateBack()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NetworkSettingsViewModel.kt$NetworkSettingsViewModel$val backendName = ServerConfig.DEFAULT.title</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NetworkSettingsViewModel.kt$NetworkSettingsViewModel$var networkSettingsState by mutableStateOf(NetworkSettingsState())</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationActions.kt$fun getDeclineCallAction(context: Context, conversationId: String, userId: String)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationActions.kt$fun getHangUpCallAction(context: Context, conversationId: String, userId: String)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationActions.kt$fun getOpenIncomingCallAction(context: Context, conversationId: String)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationActions.kt$fun getOpenOngoingCallAction(context: Context, conversationId: String)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationConstants.kt$NotificationConstants$// Notification IDs (has to be unique!) val CALL_INCOMING_NOTIFICATION_ID = "wire_incoming_call_notification".hashCode()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationConstants.kt$NotificationConstants$const val INCOMING_CALL_CHANNEL_NAME = "Incoming calls"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationConstants.kt$NotificationConstants$const val KEY_TEXT_REPLY = "key_text_notification_reply"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationConstants.kt$NotificationConstants$const val MESSAGE_CHANNEL_NAME = "Messages"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationConstants.kt$NotificationConstants$const val MESSAGE_SYNC_CHANNEL_ID = "com.wire.android.message_synchronization"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationConstants.kt$NotificationConstants$const val MESSAGE_SYNC_CHANNEL_NAME = "Message synchronization"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationConstants.kt$NotificationConstants$const val ONGOING_CALL_CHANNEL_NAME = "Ongoing calls"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationConstants.kt$NotificationConstants$const val OTHER_CHANNEL_ID = "com.wire.android.other"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationConstants.kt$NotificationConstants$const val OTHER_CHANNEL_NAME = "Other essential actions"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationConstants.kt$NotificationConstants$const val PING_CHANNEL_NAME = "Pings"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationConstants.kt$NotificationConstants$const val WEB_SOCKET_CHANNEL_ID = "com.wire.android.persistent_web_socket_channel"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationConstants.kt$NotificationConstants$const val WEB_SOCKET_CHANNEL_NAME = "Persistent WebSocket"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationConstants.kt$NotificationConstants$fun getConversationNotificationId(conversationIdString: String, userIdString: String)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationConstants.kt$NotificationConstants$val CALL_ONGOING_NOTIFICATION_ID = "wire_ongoing_call_notification".hashCode()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationConstants.kt$NotificationConstants$val MESSAGE_SYNC_NOTIFICATION_ID = "wire_notification_fetch_notification".hashCode()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationConstants.kt$NotificationConstants$val MIGRATION_NOTIFICATION_ID = "wire_migration_notification".hashCode()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationConstants.kt$NotificationConstants$val PERSISTENT_NOTIFICATION_ID = "wire_persistent_web_socket_notification".hashCode()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationFetchWorker.kt$NotificationFetchWorker.Companion$const val USER_ID_INPUT_DATA = "worker_user_id_input_data"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NotificationFetchWorker.kt$NotificationFetchWorker.Companion$const val WORK_NAME_PREFIX_PER_USER = "message-sync-"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileEventsHandlers.kt$OtherUserProfileBottomSheetEventsHandler.Companion$@Suppress("TooManyFunctions") val PREVIEW = object : OtherUserProfileBottomSheetEventsHandler { override fun onChangeMemberRole(role: Conversation.Member.Role) {} override fun onMutingConversationStatusChange(conversationId: ConversationId?, status: MutedConversationStatus) {} override fun onAddConversationToFavourites(conversationId: ConversationId?) {} override fun onMoveConversationToFolder(conversationId: ConversationId?) {} override fun onMoveConversationToArchive(conversationId: ConversationId?) {} override fun onClearConversationContent(dialogState: DialogState) {} override fun loadConversationBottomSheetContent() {} }</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileEventsHandlers.kt$OtherUserProfileEventsHandler.Companion$@Suppress("TooManyFunctions") val PREVIEW = object : OtherUserProfileEventsHandler { override fun onBlockUser(blockUserState: BlockUserDialogState) {} override fun onRemoveConversationMember(state: RemoveConversationMemberState) {} override fun onUnblockUser(userId: UserId) {} override fun getOtherUserClients() {} override fun navigateBack(): Job { TODO() } }</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileEventsHandlers.kt$OtherUserProfileFooterEventsHandler.Companion$@Suppress("TooManyFunctions") val PREVIEW = object : OtherUserProfileFooterEventsHandler { override fun onSendConnectionRequest() {} override fun onOpenConversation() {} override fun onCancelConnectionRequest() {} override fun onAcceptConnectionRequest() {} override fun onIgnoreConnectionRequest() {} }</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileGroup.kt$val Member.Role.name get() = when (this) { Member.Role.Admin -&gt; UIText.StringResource(R.string.group_role_admin) Member.Role.Member -&gt; UIText.StringResource(R.string.group_role_member) is Member.Role.Unknown -&gt; UIText.DynamicString(name) }</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModel.kt$OtherUserProfileScreenViewModel$override fun navigateBack()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModel.kt$OtherUserProfileScreenViewModel$val closeBottomSheet = _closeBottomSheet.asSharedFlow()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModel.kt$OtherUserProfileScreenViewModel$val infoMessage = _infoMessage.asSharedFlow()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileState.kt$OtherUserProfileState.Companion$val PREVIEW = OtherUserProfileState( userId = UserId("some_user", "domain.com"), fullName = "name", userName = "username", teamName = "team", email = "email", groupState = OtherUserProfileGroupState( "group name", Member.Role.Member, true, ConversationId("some_user", "domain.com") ) )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:PersistentWebSocketService.kt$PersistentWebSocketService.Companion$var isServiceStarted = false</ID>
        <ID>LibraryCodeMustSpecifyReturnType:PrivacySettingsViewModel.kt$PrivacySettingsViewModel$var state by mutableStateOf(PrivacySettingsState()) private set</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ProximitySensorManager.kt$ProximitySensorManager.Companion$const val NEAR_DISTANCE = 0F</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ProximitySensorManager.kt$ProximitySensorManager.Companion$const val TAG = "calling:ProximitySensorManager"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ProximitySensorManager.kt$ProximitySensorManager.Companion$const val field = 0x00000020</ID>
        <ID>LibraryCodeMustSpecifyReturnType:RestoreBackupDialogStateHolder.kt$RestoreDialogStateHolder.Companion$val INITIAL_STEP = RestoreDialogStep.ChooseBackupFile</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SavedStateViewModel.kt$@Composable inline fun &lt;reified T : SavedStateViewModel&gt; hiltSavedStateViewModel(backNavArgs: ImmutableMap&lt;String, Any&gt;)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaAppDataBaseProvider.kt$ScalaAppDataBaseProvider$val db @Synchronized get() = if (_db == null) { _db = applicationContext.openDatabaseIfExists(ScalaDBNameProvider.globalDB()) _db } else { _db }</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaBackendPreferences.kt$ScalaBackendPreferences.Companion$@VisibleForTesting const val ACCOUNTS_URL_PREF = "CUSTOM_BACKEND_ACCOUNTS_URL"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaBackendPreferences.kt$ScalaBackendPreferences.Companion$@VisibleForTesting const val API_VERSION_INFORMATION = "API_VERSION_INFORMATION"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaBackendPreferences.kt$ScalaBackendPreferences.Companion$@VisibleForTesting const val BASE_URL_PREF = "CUSTOM_BACKEND_BASE_URL"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaBackendPreferences.kt$ScalaBackendPreferences.Companion$@VisibleForTesting const val BLACKLIST_HOST_PREF = "CUSTOM_BACKEND_BLACKLIST_HOST"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaBackendPreferences.kt$ScalaBackendPreferences.Companion$@VisibleForTesting const val CONFIG_URL_PREF = "CUSTOM_BACKEND_CONFIG_URL"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaBackendPreferences.kt$ScalaBackendPreferences.Companion$@VisibleForTesting const val ENVIRONMENT_PREF = "CUSTOM_BACKEND_ENVIRONMENT"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaBackendPreferences.kt$ScalaBackendPreferences.Companion$@VisibleForTesting const val TEAMS_URL_PREF = "CUSTOM_BACKEND_TEAMS_URL"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaBackendPreferences.kt$ScalaBackendPreferences.Companion$@VisibleForTesting const val WEBSITE_URL_PREF = "CUSTOM_BACKEND_WEBSITE_URL"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaBackendPreferences.kt$ScalaBackendPreferences.Companion$@VisibleForTesting const val WEBSOCKET_URL_PREF = "CUSTOM_BACKEND_WEBSOCKET_URL"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaConversationDAO.kt$ScalaConversationDAO.Companion$const val COLUMN_ACCESS = "access"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaConversationDAO.kt$ScalaConversationDAO.Companion$const val COLUMN_CREATOR = "creator"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaConversationDAO.kt$ScalaConversationDAO.Companion$const val COLUMN_DOMAIN = "domain"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaConversationDAO.kt$ScalaConversationDAO.Companion$const val COLUMN_ID = "_id"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaConversationDAO.kt$ScalaConversationDAO.Companion$const val COLUMN_LAST_EVENT_TIME = "last_event_time"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaConversationDAO.kt$ScalaConversationDAO.Companion$const val COLUMN_LAST_READ = "last_read"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaConversationDAO.kt$ScalaConversationDAO.Companion$const val COLUMN_MUTED_STATUS = "muted_status"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaConversationDAO.kt$ScalaConversationDAO.Companion$const val COLUMN_NAME = "name"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaConversationDAO.kt$ScalaConversationDAO.Companion$const val COLUMN_RECEIPT_MODE = "receipt_mode"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaConversationDAO.kt$ScalaConversationDAO.Companion$const val COLUMN_REMOTE_ID = "remote_id"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaConversationDAO.kt$ScalaConversationDAO.Companion$const val COLUMN_TEAM = "team"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaConversationDAO.kt$ScalaConversationDAO.Companion$const val COLUMN_TYPE = "conv_type"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaConversationDAO.kt$ScalaConversationDAO.Companion$const val TABLE_NAME = "Conversations"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaDBNameProvider.kt$ScalaDBNameProvider$fun globalDB()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaDBNameProvider.kt$ScalaDBNameProvider$fun userDB(userId: UserId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaMessageDAO.kt$ScalaMessageDAO.Companion$const val ASSETS_TABLE_NAME = "Assets2"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaMessageDAO.kt$ScalaMessageDAO.Companion$const val ASSET_ALIAS_PREFIX = "asset_"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaMessageDAO.kt$ScalaMessageDAO.Companion$const val COLUMN_ASSET_ID = "asset_id"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaMessageDAO.kt$ScalaMessageDAO.Companion$const val COLUMN_CLIENT_ID = "client_id"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaMessageDAO.kt$ScalaMessageDAO.Companion$const val COLUMN_CONTENT = "content"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaMessageDAO.kt$ScalaMessageDAO.Companion$const val COLUMN_CONVERSATION_ID = "conv_id"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaMessageDAO.kt$ScalaMessageDAO.Companion$const val COLUMN_EDIT_TIME = "edit_time"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaMessageDAO.kt$ScalaMessageDAO.Companion$const val COLUMN_ID = "_id"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaMessageDAO.kt$ScalaMessageDAO.Companion$const val COLUMN_NAME = "name"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaMessageDAO.kt$ScalaMessageDAO.Companion$const val COLUMN_PROTO_BLOB = "protos"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaMessageDAO.kt$ScalaMessageDAO.Companion$const val COLUMN_SIZE = "size"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaMessageDAO.kt$ScalaMessageDAO.Companion$const val COLUMN_TIME = "time"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaMessageDAO.kt$ScalaMessageDAO.Companion$const val COLUMN_USER_ID = "user_id"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaMessageDAO.kt$ScalaMessageDAO.Companion$const val MESSAGES_TABLE_NAME = "Messages"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaMessageDAO.kt$ScalaMessageDAO.Companion$const val MESSAGE_ALIAS_PREFIX = "message_"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaUserDAO.kt$ScalaUserDAO.Companion$const val COLUMN_ACCENT = "accent"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaUserDAO.kt$ScalaUserDAO.Companion$const val COLUMN_AVAILABILITY = "availability"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaUserDAO.kt$ScalaUserDAO.Companion$const val COLUMN_CONNECTION = "connection"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaUserDAO.kt$ScalaUserDAO.Companion$const val COLUMN_DELETED = "deleted"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaUserDAO.kt$ScalaUserDAO.Companion$const val COLUMN_DOMAIN = "domain"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaUserDAO.kt$ScalaUserDAO.Companion$const val COLUMN_EMAIL = "email"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaUserDAO.kt$ScalaUserDAO.Companion$const val COLUMN_HANDLE = "handle"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaUserDAO.kt$ScalaUserDAO.Companion$const val COLUMN_ID = "_id"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaUserDAO.kt$ScalaUserDAO.Companion$const val COLUMN_INTEGRATION_ID = "integration_id"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaUserDAO.kt$ScalaUserDAO.Companion$const val COLUMN_NAME = "name"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaUserDAO.kt$ScalaUserDAO.Companion$const val COLUMN_PHONE = "phone"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaUserDAO.kt$ScalaUserDAO.Companion$const val COLUMN_PICTURE = "picture"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaUserDAO.kt$ScalaUserDAO.Companion$const val COLUMN_PROVIDER_ID = "provider_id"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaUserDAO.kt$ScalaUserDAO.Companion$const val COLUMN_TEAM_ID = "teamId"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaUserDAO.kt$ScalaUserDAO.Companion$const val TABLE_NAME = "Users"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScreenStateObserver.kt$ScreenStateObserver$val screenStateFlow = _screenStateFlow.asStateFlow()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScreenStateObserver.kt$ScreenStateObserver.Companion$const val TAG = "ScreenStateObserver"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SearchBarState.kt$SearchBarState$var isSearchActive by mutableStateOf(isSearchActive) private set</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SearchBarState.kt$SearchBarState$var searchQuery by mutableStateOf(searchQuery)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SearchPeopleViewModel.kt$KnownPeopleSearchViewModel$protected val knownPeopleSearchQueryFlow = mutableSearchQueryFlow .flatMapLatest { searchTerm -&gt; searchKnownPeople(searchTerm) .onStart { emit(ContactSearchResult.InternalContact(SearchResultState.InProgress)) } }</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SearchPeopleViewModel.kt$PublicWithKnownPeopleSearchViewModel$protected val publicPeopleSearchQueryFlow = mutableSearchQueryFlow .flatMapLatest { searchTerm -&gt; searchPublicPeople(searchTerm) .onStart { emit(ContactSearchResult.ExternalContact(SearchResultState.InProgress)) } }</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SearchPeopleViewModel.kt$SearchPeopleViewModel$fun initialContactResultFlow()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SearchPeopleViewModel.kt$SearchPeopleViewModel$protected val mutableSearchQueryFlow = MutableStateFlow("")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SearchPeopleViewModel.kt$SearchPeopleViewModel$protected val searchQueryFlow = mutableSearchQueryFlow .asStateFlow() .debounce(DEFAULT_SEARCH_QUERY_DEBOUNCE)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SearchPeopleViewModel.kt$SearchPeopleViewModel$protected val searchQueryTextFieldFlow = MutableStateFlow(TextFieldValue(""))</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SearchPeopleViewModel.kt$SearchPeopleViewModel$protected val selectedContactsFlow = MutableStateFlow(emptyList&lt;Contact&gt;())</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SearchPeopleViewModel.kt$SearchPeopleViewModel$var snackbarMessageState by mutableStateOf&lt;NewConversationSnackbarState&gt;(NewConversationSnackbarState.None)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SearchPeopleViewModel.kt$SearchPeopleViewModel.Companion$const val DEFAULT_SEARCH_QUERY_DEBOUNCE = 500L</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SelfDevicesViewModel.kt$SelfDevicesViewModel$fun navigateBack()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SelfUserProfileViewModel.kt$SelfUserProfileViewModel$fun navigateBack()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SelfUserProfileViewModel.kt$SelfUserProfileViewModel$var userProfileState by mutableStateOf(SelfUserProfileState()) private set</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SettingsViewModel.kt$SettingsViewModel$fun navigateTo(item: NavigationItem)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SharedCallingViewModel.kt$SharedCallingViewModel$var callState by mutableStateOf(CallState())</ID>
        <ID>LibraryCodeMustSpecifyReturnType:StringUtil.kt$fun String?.orDefault(default: String)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:StringUtil.kt$val String.Companion.EMPTY get() = ""</ID>
        <ID>LibraryCodeMustSpecifyReturnType:StringUtil.kt$val String.Companion.MENTION_SYMBOL get() = "@"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:StringUtil.kt$val String.Companion.NEW_LINE_SYMBOL get() = "\n"</ID>
        <ID>LibraryCodeMustSpecifyReturnType:StringUtil.kt$val String.Companion.WHITE_SPACE get() = " "</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SyncStateObserver.kt$SyncStateObserver$val isSynced get() = stateFlow.value == SyncState.Live</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SyncStateObserver.kt$val LocalSyncStateObserver = staticCompositionLocalOf { SyncStateObserver() }</ID>
        <ID>LibraryCodeMustSpecifyReturnType:Theme.kt$val MaterialTheme.wireColorScheme @Composable get() = LocalWireColors.current</ID>
        <ID>LibraryCodeMustSpecifyReturnType:Theme.kt$val MaterialTheme.wireDimensions @Composable get() = LocalWireDimensions.current</ID>
        <ID>LibraryCodeMustSpecifyReturnType:Theme.kt$val MaterialTheme.wireTypography @Composable get() = LocalWireTypography.current</ID>
        <ID>LibraryCodeMustSpecifyReturnType:UICallParticipantMapper.kt$UICallParticipantMapper$fun toUICallParticipant(participant: Participant)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:UIMessage.kt$MessageTime$val formattedDate = utcISO.uiMessageDateTime() ?: ""</ID>
        <ID>LibraryCodeMustSpecifyReturnType:UIText.kt$UIText$@Suppress("SpreadOperator") @Composable fun asString()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:UIText.kt$UIText$@Suppress("SpreadOperator") fun asString(resources: Resources)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:UIText.kt$fun String.toUIText()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:UserTypeMapper.kt$UserTypeMapper$fun toMembership(userType: UserType)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:VisibilityState.kt$VisibilityState$var isVisible by mutableStateOf(isVisible) private set</ID>
        <ID>LibraryCodeMustSpecifyReturnType:VisibilityState.kt$VisibilityState$var savedState by mutableStateOf&lt;Saveable?&gt;(saveable) private set</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WelcomeViewModel.kt$WelcomeViewModel$fun isProxyEnabled()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WelcomeViewModel.kt$WelcomeViewModel$var isThereActiveSession by mutableStateOf(false)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WelcomeViewModel.kt$WelcomeViewModel$var state by mutableStateOf(authServerConfigProvider.authServer.value) private set</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireActivityViewModel.kt$WireActivityViewModel$fun navigationArguments()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireButton.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun getMinTouchMargins(minSize: DpSize)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireButtonDefaults.kt$@Composable fun wirePrimaryButtonColors()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireButtonDefaults.kt$@Composable fun wireSecondaryButtonColors()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireButtonDefaults.kt$@Composable fun wireSendPrimaryButtonColors()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireButtonDefaults.kt$@Composable fun wireTertiaryButtonColors()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireCheckBoxDefaults.kt$@Composable fun wireCheckBoxColors( checkedCheckmarkColor: Color, uncheckedCheckmarkColor: Color, checkedBoxColor: Color, uncheckedBoxColor: Color, disabledCheckedBoxColor: Color, disabledUncheckedBoxColor: Color, disabledIndeterminateBoxColor: Color, checkedBorderColor: Color, uncheckedBorderColor: Color, disabledBorderColor: Color, disabledIndeterminateBorderColor: Color )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireCheckBoxDefaults.kt$@Composable fun wireCheckBoxColors()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue100 = Color(0xFFDDEDFF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue200 = Color(0xFFBBDBFF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue300 = Color(0xFF98CAFF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue400 = Color(0xFF76B8FF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue50 = Color(0xFFEEF7FF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue500 = Color(0xFF54A6FF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue600 = Color(0xFF4385CC)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue700 = Color(0xFF326499)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue800 = Color(0xFF224266)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkBlue900 = Color(0xFF19324D)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen100 = Color(0xFFD6F8DE)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen200 = Color(0xFFACF1BD)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen300 = Color(0xFF83E99D)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen400 = Color(0xFF59E27C)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen50 = Color(0xFFEBFCEF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen500 = Color(0xFF30DB5B)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen600 = Color(0xFF26AF49)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen700 = Color(0xFF1D8337)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen800 = Color(0xFF135824)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkGreen900 = Color(0xFF0E421B)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol100 = Color(0xFFDFFAFF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol200 = Color(0xFFBEF5FF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol300 = Color(0xFF9EF0FF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol400 = Color(0xFF7DEBFF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol50 = Color(0xFFEFFDFF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol500 = Color(0xFF5DE6FF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol600 = Color(0xFF4AB8CC)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol700 = Color(0xFF388A99)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol800 = Color(0xFF255C66)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPetrol900 = Color(0xFF1C454D)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple100 = Color(0xFFF8E9FF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple200 = Color(0xFFF0D2FF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple300 = Color(0xFFE9BCFF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple400 = Color(0xFFE1A5FF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple50 = Color(0xFFFCF4FF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple500 = Color(0xFFDA8FFF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple600 = Color(0xFFAE72CC)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple700 = Color(0xFF835699)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple800 = Color(0xFF573966)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkPurple900 = Color(0xFF412B4D)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed100 = Color(0xFFFFE4E2)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed200 = Color(0xFFFFC9C6)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed300 = Color(0xFFFFADA9)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed400 = Color(0xFFFF928D)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed50 = Color(0xFFFFF2F1)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed500 = Color(0xFFFF7770)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed600 = Color(0xFFCC5F5A)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed700 = Color(0xFF994743)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed800 = Color(0xFF66302D)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkRed900 = Color(0xFF4D2422)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkYellow100 = Color(0xFFFFF6D4)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkYellow200 = Color(0xFFFFEEA8)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkYellow300 = Color(0xFFFFE57D)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkYellow400 = Color(0xFFFFDD51)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkYellow50 = Color(0xFFFFFBEA)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkYellow500 = Color(0xFFFFD426)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkYellow600 = Color(0xFFCCAA1E)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkYellow700 = Color(0xFF997F17)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkYellow800 = Color(0xFF66550F)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val DarkYellow900 = Color(0xFF4D400B)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val Gray10 = Color(0xFFFAFAFA)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val Gray100 = Color(0xFF17181A)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val Gray20 = Color(0xFFEDEFF0)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val Gray30 = Color(0xFFE5E8EA)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val Gray40 = Color(0xFFDCE0E3)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val Gray50 = Color(0xFFCBCED1)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val Gray60 = Color(0xFF9FA1A7)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val Gray70 = Color(0xFF676B71)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val Gray80 = Color(0xFF54585F)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val Gray90 = Color(0xFF34373D)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val Gray95 = Color(0xFF26272C)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val GrayRed900 = Color(0xFF390000)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue100 = Color(0xFFCDE1F4)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue200 = Color(0xFF9BC2E9)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue300 = Color(0xFF6AA4DE)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue400 = Color(0xFF3885D3)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue50 = Color(0xFFE7F0FA)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue500 = Color(0xFF0667C8)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue600 = Color(0xFF0552A0)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue700 = Color(0xFF043E78)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue800 = Color(0xFF022950)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightBlue900 = Color(0xFF021F3C)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen100 = Color(0xFFD2E5D7)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen200 = Color(0xFFA6CBAF)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen300 = Color(0xFF79B087)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen400 = Color(0xFF4D965F)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen50 = Color(0xFFE9F2EB)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen500 = Color(0xFF207C37)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen600 = Color(0xFF1A632C)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen700 = Color(0xFF134A21)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen800 = Color(0xFF0D3216)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightGreen900 = Color(0xFF0A2511)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol100 = Color(0xFFCCE6EB)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol200 = Color(0xFF99CDD8)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol300 = Color(0xFF67B3C4)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol400 = Color(0xFF349AB1)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol50 = Color(0xFFE6F3F6)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol500 = Color(0xFF01819D)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol600 = Color(0xFF01677E)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol700 = Color(0xFF014D5E)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol800 = Color(0xFF00343F)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPetrol900 = Color(0xFF00272F)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple100 = Color(0xFFE7DAEE)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple200 = Color(0xFFD0B4DD)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple300 = Color(0xFFB88FCD)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple400 = Color(0xFFA169BC)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple50 = Color(0xFFF4EDF7)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple500 = Color(0xFF8944AB)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple600 = Color(0xFF6E3689)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple700 = Color(0xFF522967)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple800 = Color(0xFF371B44)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightPurple900 = Color(0xFF291433)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightRed100 = Color(0xFFF3CCD0)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightRed200 = Color(0xFFE799A1)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightRed300 = Color(0xFFDA6671)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightRed400 = Color(0xFFCE3342)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightRed50 = Color(0xFFF9E6E8)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightRed500 = Color(0xFFC20013)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightRed600 = Color(0xFF9B000F)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightRed700 = Color(0xFF74000B)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightRed800 = Color(0xFF4E0008)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightRed900 = Color(0xFF3A0006)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightYellow100 = Color(0xFFE5E0DA)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightYellow200 = Color(0xFFCCC1B5)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightYellow300 = Color(0xFFB2A38F)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightYellow400 = Color(0xFF99846A)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightYellow50 = Color(0xFFF3F0ED)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightYellow500 = Color(0xFF7F6545)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightYellow600 = Color(0xFF665137)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightYellow700 = Color(0xFF4C3D29)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightYellow800 = Color(0xFF4C3D29)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val LightYellow900 = Color(0xFF261E15)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val messageMentionBackground = Color(0x1A0772DE)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireColorPalette.kt$WireColorPalette$@Stable val messageMentionText = Color(0xFF0772DE)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireDimensions.kt$const val DEFAULT_WEIGHT = 1f</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireItemLabel.kt$@Composable fun WireItemLabel( text: String, minHeight: Dp = dimensions().badgeSmallMinSize.height, minWidth: Dp = dimensions().badgeSmallMinSize.height, contentPadding: PaddingValues = PaddingValues(horizontal = dimensions().spacing6x, vertical = dimensions().spacing2x), shape: Shape = RoundedCornerShape(dimensions().spacing6x), modifier: Modifier = Modifier )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireNotificationManager.kt$WireNotificationManager$suspend fun observeNotificationsAndCallsPersistently( userIds: List&lt;UserId&gt;, scope: CoroutineScope, doIfCallCameAndAppVisible: (Call) -&gt; Unit )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireNotificationManager.kt$WireNotificationManager$suspend fun observeNotificationsAndCallsWhileRunning( userIds: List&lt;UserId&gt;, scope: CoroutineScope, doIfCallCameAndAppVisible: (Call) -&gt; Unit )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WirePrimaryButton.kt$@Composable fun WirePrimaryButton( onClick: () -&gt; Unit, loading: Boolean = false, leadingIcon: @Composable (() -&gt; Unit)? = null, leadingIconAlignment: IconAlignment = IconAlignment.Center, trailingIcon: @Composable (() -&gt; Unit)? = null, trailingIconAlignment: IconAlignment = IconAlignment.Border, text: String? = null, fillMaxWidth: Boolean = true, textStyle: TextStyle = if(fillMaxWidth) MaterialTheme.wireTypography.button02 else MaterialTheme.wireTypography.button03, state: WireButtonState = WireButtonState.Default, blockUntilSynced: Boolean = false, minHeight: Dp = MaterialTheme.wireDimensions.buttonMinSize.height, minWidth: Dp = MaterialTheme.wireDimensions.buttonMinSize.width, shape: Shape = RoundedCornerShape(MaterialTheme.wireDimensions.buttonCornerSize), colors: WireButtonColors = wirePrimaryButtonColors(), elevation: ButtonElevation? = ButtonDefaults.buttonElevation(), borderWidth: Dp = 0.dp, contentPadding: PaddingValues = PaddingValues( horizontal = MaterialTheme.wireDimensions.buttonHorizontalContentPadding, vertical = MaterialTheme.wireDimensions.buttonVerticalContentPadding ), interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, modifier: Modifier = Modifier, )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireSecondaryButton.kt$@Composable fun WireSecondaryButton( onClick: () -&gt; Unit, loading: Boolean = false, leadingIcon: @Composable (() -&gt; Unit)? = null, leadingIconAlignment: IconAlignment = IconAlignment.Center, trailingIcon: @Composable (() -&gt; Unit)? = null, trailingIconAlignment: IconAlignment = IconAlignment.Border, text: String? = null, fillMaxWidth: Boolean = true, textStyle: TextStyle = if(fillMaxWidth) MaterialTheme.wireTypography.button02 else MaterialTheme.wireTypography.button03, state: WireButtonState = WireButtonState.Default, blockUntilSynced: Boolean = false, minHeight: Dp = MaterialTheme.wireDimensions.buttonMinSize.height, minWidth: Dp = MaterialTheme.wireDimensions.buttonMinSize.width, shape: Shape = RoundedCornerShape(MaterialTheme.wireDimensions.buttonCornerSize), colors: WireButtonColors = wireSecondaryButtonColors(), elevation: ButtonElevation? = null, borderWidth: Dp = 1.dp, contentPadding: PaddingValues = PaddingValues( horizontal = MaterialTheme.wireDimensions.buttonHorizontalContentPadding, vertical = MaterialTheme.wireDimensions.buttonVerticalContentPadding ), interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, modifier: Modifier = Modifier, )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTabRow.kt$@Suppress("MagicNumber") @OptIn(ExperimentalPagerApi::class) fun PagerState.calculateCurrentTab()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTertiaryButton.kt$@Composable fun WireTertiaryButton( onClick: () -&gt; Unit, loading: Boolean = false, leadingIcon: @Composable (() -&gt; Unit)? = null, leadingIconAlignment: IconAlignment = IconAlignment.Center, trailingIcon: @Composable (() -&gt; Unit)? = null, trailingIconAlignment: IconAlignment = IconAlignment.Border, text: String? = null, fillMaxWidth: Boolean = true, textStyle: TextStyle = MaterialTheme.wireTypography.button04, state: WireButtonState = WireButtonState.Default, blockUntilSynced: Boolean = false, minHeight: Dp = MaterialTheme.wireDimensions.buttonMinSize.height, minWidth: Dp = MaterialTheme.wireDimensions.buttonMinSize.width, shape: Shape = RoundedCornerShape(MaterialTheme.wireDimensions.buttonCornerSize), colors: WireButtonColors = wireTertiaryButtonColors(), elevation: ButtonElevation? = null, borderWidth: Dp = 1.dp, contentPadding: PaddingValues = PaddingValues( horizontal = MaterialTheme.wireDimensions.buttonHorizontalContentPadding, vertical = MaterialTheme.wireDimensions.buttonVerticalContentPadding ), interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, modifier: Modifier = Modifier, )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTopAppBarDefaults.kt$@Composable fun wireTopAppBarColors()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypography.kt$WireTypography$fun toTypography()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Badge01 = TextStyle( fontWeight = FontWeight.W700, fontSize = 10.sp, lineHeight = 11.72.sp, textAlign = TextAlign.Center )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Body01 = TextStyle( fontWeight = FontWeight.W400, fontSize = 15.sp, lineHeight = 19.sp, letterSpacing = 0.05.sp )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Body02 = Body01.copy( fontWeight = FontWeight.W500, )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Body03 = Body01.copy( fontWeight = FontWeight.W700, )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Body04 = TextStyle( fontWeight = FontWeight.W700, fontSize = 14.sp, lineHeight = 19.sp, letterSpacing = 0.35.sp )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Button01 = TextStyle( fontStyle = FontStyle.Normal, fontWeight = FontWeight.W500, fontSize = 16.sp, lineHeight = 18.sp )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Button02 = TextStyle( fontWeight = FontWeight.W500, fontSize = 15.sp, lineHeight = 17.sp, letterSpacing = 0.3.sp, textAlign = TextAlign.Center )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Button03 = TextStyle( fontWeight = FontWeight.W500, fontSize = 13.sp, lineHeight = 16.sp, letterSpacing = 0.3.sp, textAlign = TextAlign.Center )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Button04 = Button03.copy( textDecoration = TextDecoration.Underline )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Button05 = TextStyle( fontWeight = FontWeight.W500, fontSize = 12.sp, lineHeight = 14.sp, letterSpacing = 0.3.sp, textAlign = TextAlign.Center )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Code01 = TextStyle( fontWeight = FontWeight.W500, fontSize = 24.sp, lineHeight = 28.13.sp, textAlign = TextAlign.Center )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Label01 = TextStyle( fontWeight = FontWeight.W400, fontSize = 12.sp, lineHeight = 14.sp, letterSpacing = 0.25.sp )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Label02 = Label01.copy( fontWeight = FontWeight.W700, )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Label03 = TextStyle( fontWeight = FontWeight.W500, fontSize = 11.sp, lineHeight = 12.sp, letterSpacing = 0.5.sp )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Label04 = TextStyle( fontWeight = FontWeight.W400, fontSize = 14.sp, lineHeight = 16.sp, textAlign = TextAlign.Center )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Label05 = Label04.copy( fontWeight = FontWeight.W700 )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val SubLine01 = TextStyle( fontWeight = FontWeight.Normal, fontSize = 12.sp, lineHeight = 14.sp, )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Title01 = TextStyle( fontWeight = FontWeight.W500, fontSize = 18.sp, lineHeight = 23.sp, textAlign = TextAlign.Center )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Title02 = TextStyle( fontWeight = FontWeight.W500, fontSize = 16.sp, lineHeight = 20.sp )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Title03 = TextStyle( fontWeight = FontWeight.W500, fontSize = 12.sp, lineHeight = 14.sp, letterSpacing = 0.5.sp )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireTypographyBase.kt$WireTypographyBase$val Title04 = Title01.copy( fontWeight = FontWeight.W400, )</ID>
        <ID>MultiLineIfElse:MutingOptionsSheetContent.kt:67</ID>
        <ID>MultiLineIfElse:com.wire.android.mapper.MessageMapper.kt:86</ID>
        <ID>MultiLineIfElse:com.wire.android.mapper.MessageMapper.kt:88</ID>
        <ID>MultiLineIfElse:com.wire.android.mapper.MessageMapper.kt:94</ID>
        <ID>MultiLineIfElse:com.wire.android.mapper.MessageMapper.kt:96</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.authentication.create.details.CreateAccountDetailsScreen.kt:173</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.authentication.create.details.CreateAccountDetailsScreen.kt:221</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.authentication.create.email.CreateAccountEmailScreen.kt:175</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.authentication.create.overview.CreateAccountOverviewScreen.kt:131</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.authentication.create.username.CreateAccountUsernameScreen.kt:127</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.authentication.create.username.CreateAccountUsernameViewModel.kt:102</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.authentication.create.username.CreateAccountUsernameViewModel.kt:90</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.authentication.devices.DeviceItem.kt:115</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.authentication.devices.register.RegisterDeviceScreen.kt:156</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.authentication.devices.register.RegisterDeviceViewModel.kt:75</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.authentication.devices.remove.RemoveDeviceViewModel.kt:186</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.authentication.devices.remove.RemoveDeviceViewModel.kt:188</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.authentication.devices.remove.RemoveDeviceViewModel.kt:76</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.authentication.login.LoginScreen.kt:167</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.authentication.login.LoginViewModel.kt:130</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.authentication.login.LoginViewModel.kt:132</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.authentication.login.LoginViewModel.kt:69</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.calling.controlbuttons.SpeakerButton.kt:61</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.calling.ongoing.participantsview.ParticipantsTiles.kt:83</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.calling.ongoing.participantsview.gridview.CallingGridView.kt:89</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.calling.ongoing.participantsview.horizentalview.CallingHorizentalView.kt:100</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.calling.ongoing.participantsview.horizentalview.CallingHorizentalView.kt:67</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.calling.ongoing.participantsview.horizentalview.CallingHorizentalView.kt:69</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.Extensions.kt:100</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.Extensions.kt:102</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.Extensions.kt:109</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.Extensions.kt:111</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.WireDialog.kt:181</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.WireDialog.kt:184</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.WireDialog.kt:187</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.WireDialog.kt:191</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.WireDialog.kt:195</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.WireDialog.kt:199</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.bottomsheet.conversation.ConversationSheetContent.kt:77</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.bottomsheet.conversation.ConversationSheetContent.kt:79</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.bottomsheet.conversation.HomeSheetContent.kt:171</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.bottomsheet.conversation.HomeSheetContent.kt:194</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.bottomsheet.conversation.HomeSheetContent.kt:216</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.bottomsheet.conversation.HomeSheetContent.kt:238</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.bottomsheet.conversation.HomeSheetContent.kt:98</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.button.WireButton.kt:110</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.button.WireButton.kt:112</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.button.WireButton.kt:189</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.dialogs.BlockUserDialogs.kt:61</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.dialogs.BlockUserDialogs.kt:63</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.dialogs.UnblockUserDialogs.kt:62</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.dialogs.UnblockUserDialogs.kt:64</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.textfield.WireTextField.kt:105</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.textfield.WireTextField.kt:176</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.textfield.WireTextField.kt:207</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.textfield.WireTextField.kt:217</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.textfield.WireTextField.kt:235</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.common.topappbar.CommonTopAppBarViewModel.kt:71</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.HomeScreen.kt:260</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversations.ConversationTopAppBar.kt:96</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversations.details.GroupConversationDetailsViewModel.kt:363</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversations.details.dialog.ClearConversationContentDialog.kt:57</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversations.details.dialog.ClearConversationContentDialog.kt:59</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversations.details.menu.DeleteConversationGroupDialog.kt:57</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversations.details.menu.DeleteConversationGroupDialog.kt:59</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversations.details.menu.LeaveConversationGroupDialog.kt:57</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversations.details.menu.LeaveConversationGroupDialog.kt:59</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversations.details.options.GroupConversationOptionsItem.kt:100</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversations.details.options.GroupConversationOptionsItem.kt:107</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversations.details.options.GroupConversationOptionsItem.kt:114</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversations.details.options.GroupConversationOptionsItem.kt:86</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversations.details.participants.GroupConversationParticipants.kt:81</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversations.details.participants.GroupConversationParticipants.kt:94</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversations.info.ConversationInfoViewModel.kt:167</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversations.search.SearchPeopleRouter.kt:139</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversations.search.SearchPeopleRouter.kt:150</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.conversationslist.ConversationListViewModel.kt:419</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.messagecomposer.attachment.AttachmentOptions.kt:191</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.home.messagecomposer.attachment.AttachmentOptions.kt:205</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.settings.devices.SelfDevicesViewModel.kt:57</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.userprofile.other.OtherUserConnectionStatusInfo.kt:56</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.userprofile.other.OtherUserConnectionStatusInfo.kt:67</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.userprofile.other.OtherUserProfileDetails.kt:57</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.userprofile.other.OtherUserProfileDetails.kt:65</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.userprofile.other.OtherUserProfileScreenViewModel.kt:285</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.userprofile.other.OtherUserProfileScreenViewModel.kt:307</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.userprofile.other.OtherUserProfileScreenViewModel.kt:403</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.userprofile.other.RemoveConversationMemberDialog.kt:61</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.userprofile.other.RemoveConversationMemberDialog.kt:63</ID>
        <ID>MultiLineIfElse:com.wire.android.ui.userprofile.self.SelfUserProfileScreen.kt:365</ID>
        <ID>MultiLineIfElse:com.wire.android.util.deeplink.DeepLinkProcessor.kt:125</ID>
        <ID>MultiLineIfElse:com.wire.android.util.deeplink.DeepLinkProcessor.kt:127</ID>
        <ID>MultiLineIfElse:com.wire.android.util.extension.LazyListScope.kt:70</ID>
        <ID>MultiLineIfElse:com.wire.android.util.lifecycle.ConnectionPolicyManager.kt:84</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.datastore.UserDataStore.kt:87</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.di.AppModule.kt:65</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.di.LogWriterModule.kt:44</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.feature.AccountSwitchUseCase.kt:120</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.mapper.UserTypeMapper.kt:39</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.migration.feature.MigrateServerConfigUseCase.kt:79</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.authentication.create.common.CreateAccountBaseViewModel.kt:363</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.authentication.create.details.CreateAccountDetailsScreen.kt:152</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.authentication.create.email.CreateAccountEmailViewState.kt:51</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.authentication.devices.remove.RemoveDeviceScreen.kt:141</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.authentication.devices.remove.RemoveDeviceViewModel.kt:118</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.authentication.login.LoginScreen.kt:137</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.authentication.login.email.ProxyScreen.kt:125</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.authentication.welcome.WelcomeScreen.kt:178</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.calling.ongoing.participantsview.horizentalview.CallingHorizentalView.kt:105</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.common.SecurityClassificationBanner.kt:102</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.common.button.WireCheckBoxDefaults.kt:124</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.common.spacers.VerticalSpace.kt:55</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.conversations.banner.ConversationBannerViewModel.kt:105</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.conversations.banner.ConversationBannerViewModel.kt:107</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.conversations.banner.usecase.ObserveConversationMembersByTypesUseCase.kt:46</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.conversations.details.GroupConversationDetailsScreen.kt:296</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.conversations.details.GroupConversationDetailsViewModel.kt:412</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.conversations.details.GroupDetailsBaseViewModel.kt:37</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.conversations.details.participants.ConversationParticipantItem.kt:96</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.conversations.details.participants.GroupConversationParticipantsViewModel.kt:86</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.conversations.info.ConversationInfoViewModel.kt:203</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.conversations.model.UIMessage.kt:102</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.conversations.search.SearchPeopleScreen.kt:178</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.conversations.search.SearchPeopleScreenState.kt:78</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.conversationslist.ConversationListViewModel.kt:429</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.conversationslist.ConversationRouter.kt:274</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.conversationslist.model.LastConversationEvent.kt:39</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.newconversation.contacts.ContactsScreen.kt:111</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.settings.SettingsViewModel.kt:45</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.settings.devices.SelfDevicesViewModel.kt:69</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.userprofile.avatarpicker.AvatarPickerViewModel.kt:151</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.userprofile.other.OtherUserProfileEventsHandlers.kt:69</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.userprofile.other.OtherUserProfileInfoMessageType.kt:60</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.userprofile.other.RemoveConversationMemberDialog.kt:68</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.userprofile.other.bottomsheet.OtherUserBottomSheetState.kt:64</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.userprofile.self.SelfUserProfileScreen.kt:361</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.util.EmailComposer.kt:66</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.util.deeplink.DeepLinkProcessor.kt:147</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.util.time.ISOFormatter.kt:36</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.workmanager.WireWorkerFactory.kt:58</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.workmanager.worker.NotificationFetchWorker.kt:70</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.datastore.GlobalDataStore.kt:59</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.di.AppModule.kt:68</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.di.CoroutineScope.kt:38</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.di.CoroutineScope.kt:55</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.di.LogWriterModule.kt:33</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.media.CallRinger.kt:84</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.migration.feature.MigrateMessagesUseCase.kt:59</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.WireActivityViewModel.kt:127</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.authentication.create.summary.CreateAccountSummaryViewModel.kt:40</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.authentication.devices.remove.RemoveDeviceViewModel.kt:167</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.authentication.login.LoginState.kt:49</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.authentication.login.sso.LoginSSOViewModel.kt:201</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.authentication.welcome.WelcomeScreen.kt:338</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.authentication.welcome.WelcomeViewModel.kt:51</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.calling.ProximitySensorManager.kt:107</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.calling.ongoing.participantsview.ParticipantTile.kt:190</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.CollapsingTopBarScaffold.kt:119</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.MembershipQualifierLabel.kt:44</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.SettingUpWireScreenContent.kt:102</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.SurfaceBackgroundWrapper.kt:43</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.UserProfileAvatar.kt:102</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.WireCircularProgressIndicator.kt:31</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.WireDropDown.kt:248</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.WireDropDown.kt:99</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.bottomsheet.WireModalSheetLayout.kt:107</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.bottomsheet.conversation.HomeSheetContent.kt:281</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.button.WireButton.kt:213</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.button.WireButton.kt:66</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.button.WirePrimaryButton.kt:97</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.button.WireSecondaryButton.kt:48</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.button.WireSecondaryButton.kt:97</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.button.WireTertiaryButton.kt:140</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.button.WireTertiaryButton.kt:92</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.dialogs.CustomBEDeeplinkDialog.kt:75</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.dialogs.DialogStates.kt:31</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.effects.LaunchedEffects.kt:30</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.textfield.WirePasswordTextField.kt:122</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.textfield.WireTextFieldDefaults.kt:138</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.topappbar.search.SearchTopBar.kt:127</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.common.topappbar.search.SearchTopBar.kt:23</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversations.details.GroupConversationDetailsScreen.kt:324</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversations.details.menu.GroupConversationDetailsBottomSheetEventsHandler.kt:47</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversations.details.options.GroupConversationOptionsItem.kt:251</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversations.details.participants.GroupConversationParticipantsViewModel.kt:42</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversations.details.participants.usecase.ObserveParticipantsForConversationUseCase.kt:53</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversations.messagedetails.MessageDetailsScreen.kt:226</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversations.mock.Mock.kt:311</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversations.mock.Mock.kt:89</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversations.search.HighLightSubtTitle.kt:42</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversations.search.SearchPeopleScreenState.kt:35</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversationslist.all.AllConversationScreen.kt:115</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversationslist.common.GroupConversationAvatar.kt:46</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversationslist.common.RowItem.kt:38</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversationslist.common.RowItem.kt:60</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversationslist.mention.MentionScreen.kt:109</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversationslist.model.LastConversationEvent.kt:61</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversationslist.model.LastConversationEvent.kt:68</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversationslist.model.LastConversationEvent.kt:73</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversationslist.navigation.ConversationsNavigationItem.kt:28</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversationslist.search.SearchConversationScreen.kt:49</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.gallery.MediaGalleryScreen.kt:155</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.newconversation.common.Screen.kt:23</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.newconversation.groupOptions.GroupOptionsScreen.kt:264</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.settings.appsettings.AppSettingsScreen.kt:54</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.settings.backup.BackUpAndRestoreStateHolder.kt:61</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.userprofile.common.UserProfileInfo.kt:203</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.userprofile.other.OtherUserProfileDetails.kt:75</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.userprofile.self.SelfUserProfileScreen.kt:85</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.userprofile.self.model.OtherAccount.kt:26</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.util.ImageUtil.kt:48</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.util.ScreenStateObserver.kt:67</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.util.debug.FeatureVisibilityFlags.kt:61</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.util.ui.StyledStringUtil.kt:71</ID>
        <ID>NoLineBreakAfterElse:com.wire.android.ui.home.conversations.info.ConversationInfoViewModel.kt:167</ID>
        <ID>NoMultipleSpaces:com.wire.android.notification.broadcastreceivers.CallNotificationDismissReceiver.kt:42</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.ShakeAnimation.kt:47</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.ShakeAnimation.kt:48</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.bottomsheet.MenuBottomSheetItem.kt:75</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.button.WireButtonDefaults.kt:100</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.button.WireButtonDefaults.kt:101</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.button.WireButtonDefaults.kt:102</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.button.WireButtonDefaults.kt:103</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.button.WireButtonDefaults.kt:104</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.button.WireButtonDefaults.kt:107</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.button.WireButtonDefaults.kt:108</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.button.WireButtonDefaults.kt:109</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.button.WireButtonDefaults.kt:110</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.button.WireButtonDefaults.kt:111</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.button.WireButtonDefaults.kt:117</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.button.WireButtonDefaults.kt:118</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.button.WireButtonDefaults.kt:119</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.button.WireButtonDefaults.kt:120</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.common.button.WireButtonDefaults.kt:121</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.home.HomeTopBar.kt:62</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.home.conversationslist.ConversationListViewModel.kt:221</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.server.ApiVersioningDialogs.kt:64</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.ThemeUtils.kt:51</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.ThemeUtils.kt:52</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.WireColorPalette.kt:108</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.WireColorPalette.kt:119</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.WireColorPalette.kt:130</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.WireColorPalette.kt:141</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.WireColorPalette.kt:152</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.WireColorPalette.kt:31</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.WireColorPalette.kt:42</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.WireColorPalette.kt:53</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.WireColorPalette.kt:64</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.WireColorPalette.kt:75</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.WireColorPalette.kt:86</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.WireColorPalette.kt:97</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.WireTypography.kt:35</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.WireTypography.kt:36</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.WireTypography.kt:38</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.WireTypography.kt:44</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.theme.WireTypography.kt:46</ID>
        <ID>NoMultipleSpaces:com.wire.android.ui.userprofile.other.OtherUserConnectionActionButton.kt:60</ID>
        <ID>NoSemicolons:com.wire.android.media.CallRinger.kt:104</ID>
        <ID>NoSemicolons:com.wire.android.media.CallRinger.kt:111</ID>
        <ID>NoSemicolons:com.wire.android.media.CallRinger.kt:80</ID>
        <ID>NoSemicolons:com.wire.android.media.CallRinger.kt:90</ID>
        <ID>NoSemicolons:com.wire.android.media.CallRinger.kt:96</ID>
        <ID>NoSemicolons:com.wire.android.ui.calling.ProximitySensorManager.kt:56</ID>
        <ID>NoSemicolons:com.wire.android.ui.home.conversationslist.model.Membership.kt:37</ID>
        <ID>NoUnusedImports:com.wire.android.ui.authentication.create.code.CreateAccountCodeViewModel.kt:24</ID>
        <ID>NoUnusedImports:com.wire.android.ui.authentication.create.details.CreateAccountDetailsViewModel.kt:24</ID>
        <ID>NoUnusedImports:com.wire.android.ui.authentication.create.email.CreateAccountEmailScreen.kt:45</ID>
        <ID>NoUnusedImports:com.wire.android.ui.authentication.create.email.CreateAccountEmailScreen.kt:71</ID>
        <ID>NoUnusedImports:com.wire.android.ui.authentication.create.personalaccount.CreatePersonalAccountNavigationItem.kt:29</ID>
        <ID>NoUnusedImports:com.wire.android.ui.authentication.create.personalaccount.CreatePersonalAccountScreen.kt:26</ID>
        <ID>NoUnusedImports:com.wire.android.ui.authentication.create.personalaccount.CreatePersonalAccountScreen.kt:40</ID>
        <ID>NoUnusedImports:com.wire.android.ui.authentication.create.team.CreateTeamNavigationItem.kt:29</ID>
        <ID>NoUnusedImports:com.wire.android.ui.authentication.create.team.CreateTeamScreen.kt:26</ID>
        <ID>NoUnusedImports:com.wire.android.ui.authentication.create.team.CreateTeamScreen.kt:40</ID>
        <ID>NoUnusedImports:com.wire.android.ui.authentication.create.username.CreateAccountUsernameScreen.kt:40</ID>
        <ID>NoUnusedImports:com.wire.android.ui.authentication.create.username.CreateAccountUsernameScreen.kt:56</ID>
        <ID>NoUnusedImports:com.wire.android.ui.calling.controlbuttons.CameraButton.kt:36</ID>
        <ID>NoUnusedImports:com.wire.android.ui.calling.controlbuttons.CameraFlipButton.kt:36</ID>
        <ID>NoUnusedImports:com.wire.android.ui.calling.controlbuttons.MicrophoneButton.kt:32</ID>
        <ID>NoUnusedImports:com.wire.android.ui.calling.controlbuttons.SpeakerButton.kt:32</ID>
        <ID>NoUnusedImports:com.wire.android.ui.calling.initiating.InitiatingCallScreen.kt:52</ID>
        <ID>NoUnusedImports:com.wire.android.ui.common.AttachmentButton.kt:42</ID>
        <ID>NoUnusedImports:com.wire.android.ui.common.AttachmentButton.kt:44</ID>
        <ID>NoUnusedImports:com.wire.android.ui.common.MembershipQualifierLabel.kt:37</ID>
        <ID>NoUnusedImports:com.wire.android.ui.common.RowItemTemplate.kt:28</ID>
        <ID>NoUnusedImports:com.wire.android.ui.common.RowItemTemplate.kt:31</ID>
        <ID>NoUnusedImports:com.wire.android.ui.common.RowItemTemplate.kt:32</ID>
        <ID>NoUnusedImports:com.wire.android.ui.common.RowItemTemplate.kt:34</ID>
        <ID>NoUnusedImports:com.wire.android.ui.common.SearchBar.kt:35</ID>
        <ID>NoUnusedImports:com.wire.android.ui.common.WireSwitch.kt:31</ID>
        <ID>NoUnusedImports:com.wire.android.ui.home.HomeViewModel.kt:23</ID>
        <ID>NoUnusedImports:com.wire.android.ui.home.conversations.search.HighLightName.kt:27</ID>
        <ID>NoUnusedImports:com.wire.android.ui.home.conversations.search.HighLightName.kt:31</ID>
        <ID>NoUnusedImports:com.wire.android.ui.home.conversations.search.SearchPeopleRouter.kt:44</ID>
        <ID>NoUnusedImports:com.wire.android.ui.home.conversations.search.SearchPeopleScreenState.kt:23</ID>
        <ID>NoUnusedImports:com.wire.android.ui.home.conversations.search.SearchPeopleScreenState.kt:24</ID>
        <ID>NoUnusedImports:com.wire.android.ui.home.conversationslist.ConversationListViewModel.kt:81</ID>
        <ID>NoUnusedImports:com.wire.android.ui.home.gallery.MediaGalleryViewModel.kt:39</ID>
        <ID>NoUnusedImports:com.wire.android.ui.home.gallery.ZoomableImage.kt:38</ID>
        <ID>NoUnusedImports:com.wire.android.ui.home.settings.backup.dialog.create.CreateBackupDialogStateHolder.kt:29</ID>
        <ID>NoUnusedImports:com.wire.android.ui.server.ApiVersioningDialogs.kt:23</ID>
        <ID>NoUnusedImports:com.wire.android.ui.server.ApiVersioningDialogs.kt:24</ID>
        <ID>NoUnusedImports:com.wire.android.ui.server.ApiVersioningDialogs.kt:25</ID>
        <ID>NoUnusedImports:com.wire.android.ui.server.ApiVersioningDialogs.kt:26</ID>
        <ID>NoUnusedImports:com.wire.android.ui.server.ApiVersioningDialogs.kt:28</ID>
        <ID>NoUnusedImports:com.wire.android.ui.server.ApiVersioningDialogs.kt:30</ID>
        <ID>NoUnusedImports:com.wire.android.ui.server.ApiVersioningDialogs.kt:32</ID>
        <ID>NoUnusedImports:com.wire.android.ui.server.ApiVersioningDialogs.kt:34</ID>
        <ID>NoUnusedImports:com.wire.android.ui.server.ApiVersioningDialogs.kt:40</ID>
        <ID>NoUnusedImports:com.wire.android.ui.theme.Theme.kt:28</ID>
        <ID>NoUnusedImports:com.wire.android.ui.theme.WireTypography.kt:26</ID>
        <ID>NoUnusedImports:com.wire.android.ui.theme.WireTypography.kt:27</ID>
        <ID>NoUnusedImports:com.wire.android.ui.theme.WireTypography.kt:28</ID>
        <ID>NoUnusedImports:com.wire.android.ui.theme.WireTypography.kt:29</ID>
        <ID>NoUnusedImports:com.wire.android.ui.theme.WireTypography.kt:30</ID>
        <ID>NoUnusedImports:com.wire.android.util.FileManager.kt:25</ID>
        <ID>NoUnusedImports:com.wire.android.util.extension.LazyListScope.kt:27</ID>
        <ID>NoUnusedImports:com.wire.android.util.extension.LazyListScope.kt:34</ID>
        <ID>NoUnusedImports:com.wire.android.util.permission.CallingRecordAudioRequestFlow.kt:31</ID>
        <ID>NoUnusedImports:com.wire.android.util.ui.StyledStringUtil.kt:36</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.authentication.welcome.WelcomeScreen.kt:212</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.calling.controlbuttons.CameraButton.kt:99</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.common.button.WireButtonDefaults.kt:100</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.common.button.WireButtonDefaults.kt:101</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.common.button.WireButtonDefaults.kt:102</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.common.button.WireButtonDefaults.kt:103</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.common.button.WireButtonDefaults.kt:104</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.common.button.WireButtonDefaults.kt:117</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.common.button.WireButtonDefaults.kt:118</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.common.button.WireButtonDefaults.kt:119</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.common.button.WireButtonDefaults.kt:120</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.common.button.WireButtonDefaults.kt:121</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.common.textfield.WireTextField.kt:100</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.home.conversations.details.GroupConversationDetailsViewModel.kt:304</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.home.conversations.details.GroupConversationDetailsViewModel.kt:360</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.settings.devices.SelfDevicesViewModel.kt:41</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:32</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:33</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:35</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:36</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:37</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:38</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:39</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:40</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:41</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:42</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:43</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:45</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:47</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:49</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:52</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:53</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:54</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:57</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:58</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:59</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireColorScheme.kt:63</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireTypography.kt:35</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireTypography.kt:36</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireTypography.kt:37</ID>
        <ID>ParameterListWrapping:com.wire.android.ui.theme.WireTypography.kt:38</ID>
        <ID>RedundantElseInWhen:SelfUserProfileScreen.kt$when (errorCode) { DownloadUserInfoError -&gt; stringResource(R.string.error_downloading_self_user_profile_picture) // Add more future errors for a more granular error handling else -&gt; stringResource(R.string.error_unknown_title) }</ID>
        <ID>SpacingAroundColon:com.wire.android.migration.failure.MigrationFailure.kt:25</ID>
        <ID>SpacingAroundColon:com.wire.android.migration.failure.MigrationFailure.kt:26</ID>
        <ID>SpacingAroundColon:com.wire.android.migration.failure.MigrationFailure.kt:27</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.WireActivityState.kt:25</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.WireActivityState.kt:26</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.WireActivityState.kt:27</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.WireActivityState.kt:28</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.authentication.create.code.CreateAccountCodeViewState.kt:48</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.authentication.login.LoginError.kt:42</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.authentication.login.LoginError.kt:43</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.common.visbility.VisibilityState.kt:31</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.common.visbility.VisibilityState.kt:41</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.common.visbility.VisibilityState.kt:59</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.home.conversations.details.participants.GroupConversationParticipants.kt:53</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.home.conversations.info.ConversationInfoViewState.kt:32</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.home.conversationslist.common.UserLabel.kt:36</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.home.conversationslist.model.ConversationFolder.kt:27</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.home.conversationslist.model.ConversationFolder.kt:28</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.home.conversationslist.model.ConversationFolder.kt:29</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.home.conversationslist.model.ConversationFolder.kt:30</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.home.conversationslist.model.ConversationFolder.kt:32</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.home.conversationslist.model.LastConversationEvent.kt:34</ID>
        <ID>SpacingAroundColon:com.wire.android.ui.userprofile.other.bottomsheet.OtherUserProfileBottomSheet.kt:35</ID>
        <ID>SpacingAroundColon:com.wire.android.util.DataDogLogger.kt:27</ID>
        <ID>SpacingAroundColon:com.wire.android.util.SyncStateObserver.kt:28</ID>
        <ID>SpacingAroundColon:com.wire.android.workmanager.WireForegroundNotificationDetailsProvider.kt:26</ID>
        <ID>SpacingAroundComma:com.wire.android.ui.calling.ongoing.participantsview.ParticipantTile.kt:80</ID>
        <ID>SpacingAroundComma:com.wire.android.ui.home.conversations.ConversationScreen.kt:386</ID>
        <ID>SpacingAroundComma:com.wire.android.ui.home.conversations.details.options.GroupConversationOptionsItem.kt:140</ID>
        <ID>SpacingAroundComma:com.wire.android.ui.home.conversations.details.participants.GroupConversationParticipants.kt:84</ID>
        <ID>SpacingAroundCurly:com.wire.android.ui.authentication.create.details.CreateAccountDetailsScreen.kt:260</ID>
        <ID>SpacingAroundCurly:com.wire.android.ui.common.WireDropDown.kt:268</ID>
        <ID>SpacingAroundCurly:com.wire.android.ui.home.conversations.banner.usecase.ObserveConversationMembersByTypesUseCase.kt:40</ID>
        <ID>SpacingAroundCurly:com.wire.android.ui.home.conversations.search.widget.SearchFailureWidget.kt:38</ID>
        <ID>SpacingAroundCurly:com.wire.android.ui.home.messagecomposer.attachment.AttachmentOptions.kt:130</ID>
        <ID>SpacingAroundCurly:com.wire.android.util.extension.LazyListScope.kt:62</ID>
        <ID>SpacingAroundCurly:com.wire.android.util.lifecycle.ConnectionPolicyManager.kt:155</ID>
        <ID>SpacingAroundCurly:com.wire.android.util.lifecycle.ConnectionPolicyManager.kt:157</ID>
        <ID>SpacingAroundKeyword:com.wire.android.migration.feature.MigrateServerConfigUseCase.kt:65</ID>
        <ID>SpacingAroundKeyword:com.wire.android.ui.authentication.create.username.CreateAccountUsernameScreen.kt:141</ID>
        <ID>SpacingAroundKeyword:com.wire.android.ui.authentication.create.username.CreateAccountUsernameScreen.kt:161</ID>
        <ID>SpacingAroundKeyword:com.wire.android.ui.common.WireTabRow.kt:110</ID>
        <ID>SpacingAroundKeyword:com.wire.android.ui.common.WireTabRow.kt:74</ID>
        <ID>SpacingAroundKeyword:com.wire.android.ui.common.button.WireButtonDefaults.kt:127</ID>
        <ID>SpacingAroundKeyword:com.wire.android.ui.common.button.WireButtonDefaults.kt:138</ID>
        <ID>SpacingAroundKeyword:com.wire.android.ui.common.button.WireButtonDefaults.kt:149</ID>
        <ID>SpacingAroundKeyword:com.wire.android.ui.common.button.WirePrimaryButton.kt:59</ID>
        <ID>SpacingAroundKeyword:com.wire.android.ui.common.button.WireSecondaryButton.kt:59</ID>
        <ID>SpacingAroundKeyword:com.wire.android.ui.common.textfield.CodeTextField.kt:151</ID>
        <ID>SpacingAroundKeyword:com.wire.android.ui.home.conversations.edit.EditMessageMenuItems.kt:69</ID>
        <ID>SpacingAroundKeyword:com.wire.android.ui.home.newconversation.groupOptions.GroupOptionsScreen.kt:232</ID>
        <ID>SpacingAroundKeyword:com.wire.android.ui.theme.Theme.kt:49</ID>
        <ID>SpacingAroundKeyword:com.wire.android.util.lifecycle.ConnectionPolicyManager.kt:157</ID>
        <ID>SpacingAroundOperators:com.wire.android.ui.common.visbility.VisibilityState.kt:64</ID>
        <ID>SpacingAroundParens:com.wire.android.ui.common.bottomsheet.ModalSheetHeaderItem.kt:66</ID>
        <ID>SpacingAroundParens:com.wire.android.ui.home.messagecomposer.attachment.AttachmentOptions.kt:114</ID>
        <ID>SpacingAroundParens:com.wire.android.ui.settings.devices.model.SelfDevicesState.kt:25</ID>
        <ID>StringTemplate:com.wire.android.notification.NotificationConstants.kt:63</ID>
        <ID>StringTemplate:com.wire.android.util.FileUtil.kt:267</ID>
        <ID>StringTemplate:com.wire.android.util.LogFileWriter.kt:151</ID>
        <ID>UnreachableCode:MessageComposerInnerState.kt$MessageComposerInnerState$content?.let { quotedContent -&gt; quotedMessageData = QuotedMessageUIData( messageId = uiMessage.messageHeader.messageId, senderId = authorId, senderName = authorName, originalMessageDateDescription = "".toUIText(), editedTimeDescription = "".toUIText(), quotedContent = quotedContent ) }</ID>
        <ID>UnreachableCode:MessageComposerInnerState.kt$MessageComposerInnerState$quotedMessageData = QuotedMessageUIData( messageId = uiMessage.messageHeader.messageId, senderId = authorId, senderName = authorName, originalMessageDateDescription = "".toUIText(), editedTimeDescription = "".toUIText(), quotedContent = quotedContent )</ID>
        <ID>UnreachableCode:MessageComposerInnerState.kt$MessageComposerInnerState$toActive()</ID>
        <ID>UnreachableCode:MessageComposerInnerState.kt$MessageComposerInnerState$val authorId = uiMessage.messageHeader.userId ?: return</ID>
        <ID>UnreachableCode:MessageComposerInnerState.kt$MessageComposerInnerState$val content = when (val content = uiMessage.messageContent) { is UIMessageContent.AssetMessage -&gt; QuotedMessageUIData.GenericAsset( assetName = content.assetName, assetMimeType = content.assetExtension ) is UIMessageContent.RestrictedAsset -&gt; QuotedMessageUIData.GenericAsset( assetName = content.assetName, assetMimeType = content.mimeType ) is UIMessageContent.TextMessage -&gt; QuotedMessageUIData.Text( value = content.messageBody.message.asString(context.resources) ) is UIMessageContent.ImageMessage -&gt; content.asset?.let { QuotedMessageUIData.DisplayableImage(displayable = content.asset) } else -&gt; { appLogger.w("Attempting to reply to an unsupported message type of content = $content") null } }</ID>
        <ID>UnreachableCode:MessageNotificationManager.kt$MessageNotificationManager.Companion$NotificationManagerCompat.from(context).notify(conversationNotificationId, notification)</ID>
        <ID>UnreachableCode:MessageNotificationManager.kt$MessageNotificationManager.Companion$getLargeIcon()</ID>
        <ID>UnreachableCode:MessageNotificationManager.kt$MessageNotificationManager.Companion$loadDrawable(context)</ID>
        <ID>UnreachableCode:MessageNotificationManager.kt$MessageNotificationManager.Companion$replyText?.let { val replyMessage = NotificationCompat.MessagingStyle.Message(replyText, System.currentTimeMillis(), sender) messagesStyle.addMessage(replyMessage) }</ID>
        <ID>UnreachableCode:MessageNotificationManager.kt$MessageNotificationManager.Companion$val currentNotification = (context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager) .activeNotifications .find { it.id == conversationNotificationId } ?.notification ?: return // if there is no notification for this conversation, then there is nothing to update</ID>
        <ID>UnreachableCode:MessageNotificationManager.kt$MessageNotificationManager.Companion$val messagesStyle = NotificationCompat.MessagingStyle.extractMessagingStyleFromNotification(currentNotification) ?: return // if notification is not in MessagingStyle, then we can't update it</ID>
        <ID>UnreachableCode:MessageNotificationManager.kt$MessageNotificationManager.Companion$val notification = setUpNotificationBuilder(context, userId).apply { setContentIntent(messagePendingIntent(context, conversationId, userIdString)) addAction(getActionReply(context, conversationId, userIdString)) setWhen(System.currentTimeMillis()) setLargeIcon((currentNotification.getLargeIcon()?.loadDrawable(context) as BitmapDrawable?)?.bitmap) setStyle(messagesStyle) }.build()</ID>
        <ID>UnreachableCode:MessageNotificationManager.kt$MessageNotificationManager.Companion$val sender = Person.Builder() .setName(context.getString(R.string.notification_receiver_name)) .build()</ID>
        <ID>UnsafeCallOnNullableType:AddMembersToConversationViewModel.kt$AddMembersToConversationViewModel$savedStateHandle.get&lt;String&gt;(EXTRA_CONVERSATION_ID)!!</ID>
        <ID>UnsafeCallOnNullableType:ConversationBannerViewModel.kt$ConversationBannerViewModel$savedStateHandle.get&lt;String&gt;(EXTRA_CONVERSATION_ID)!!</ID>
        <ID>UnsafeCallOnNullableType:ConversationCallViewModel.kt$ConversationCallViewModel$savedStateHandle.get&lt;String&gt;(EXTRA_CONVERSATION_ID)!!</ID>
        <ID>UnsafeCallOnNullableType:ConversationInfoViewModel.kt$ConversationInfoViewModel$savedStateHandle.get&lt;String&gt;(EXTRA_CONVERSATION_ID)!!</ID>
        <ID>UnsafeCallOnNullableType:ConversationMessagesViewModel.kt$ConversationMessagesViewModel$savedStateHandle.get&lt;String&gt;(EXTRA_CONVERSATION_ID)!!</ID>
        <ID>UnsafeCallOnNullableType:ConversationRouter.kt$conversationState.conversationSheetContent!!</ID>
        <ID>UnsafeCallOnNullableType:ConversationScreen.kt$conversationScreenState.selectedMessage?.messageHeader!!</ID>
        <ID>UnsafeCallOnNullableType:ConversationSheetContent.kt$conversationSheetState.conversationSheetContent!!</ID>
        <ID>UnsafeCallOnNullableType:EditConversationMetadataViewModel.kt$EditConversationMetadataViewModel$savedStateHandle.get&lt;String&gt;(EXTRA_CONVERSATION_ID)!!</ID>
        <ID>UnsafeCallOnNullableType:FeatureFlagNotificationViewModel.kt$FeatureFlagNotificationViewModel$it.isFileSharingEnabled!!</ID>
        <ID>UnsafeCallOnNullableType:FeatureFlagNotificationViewModel.kt$FeatureFlagNotificationViewModel$it.isStatusChanged!!</ID>
        <ID>UnsafeCallOnNullableType:GroupConversationDetailsScreen.kt$conversationSheetState.conversationSheetContent!!</ID>
        <ID>UnsafeCallOnNullableType:GroupConversationDetailsViewModel.kt$GroupConversationDetailsViewModel$savedStateHandle.get&lt;String&gt;(EXTRA_CONVERSATION_ID)!!</ID>
        <ID>UnsafeCallOnNullableType:GroupConversationParticipantsViewModel.kt$GroupConversationParticipantsViewModel$savedStateHandle.get&lt;String&gt;(EXTRA_CONVERSATION_ID)!!</ID>
        <ID>UnsafeCallOnNullableType:HomeDrawer.kt$data.icon!!</ID>
        <ID>UnsafeCallOnNullableType:HomeDrawer.kt$data.title!!</ID>
        <ID>UnsafeCallOnNullableType:LoginViewModel.kt$LoginViewModel$serverConfig.apiProxy?.needsAuthentication!!</ID>
        <ID>UnsafeCallOnNullableType:MediaGalleryViewModel.kt$MediaGalleryViewModel$savedStateHandle.get&lt;String&gt;(EXTRA_IMAGE_DATA)!!</ID>
        <ID>UnsafeCallOnNullableType:MessageComposerViewModel.kt$MessageComposerViewModel$isFileSharingEnabled().isFileSharingEnabled!!</ID>
        <ID>UnsafeCallOnNullableType:MessageComposerViewModel.kt$MessageComposerViewModel$savedStateHandle.get&lt;String&gt;(EXTRA_CONVERSATION_ID)!!</ID>
        <ID>UnsafeCallOnNullableType:MessageDetailsViewModel.kt$MessageDetailsViewModel$savedStateHandle.get&lt;String&gt;(EXTRA_CONVERSATION_ID)!!</ID>
        <ID>UnsafeCallOnNullableType:MessageDetailsViewModel.kt$MessageDetailsViewModel$savedStateHandle.get&lt;String&gt;(EXTRA_IS_SELF_MESSAGE)!!</ID>
        <ID>UnsafeCallOnNullableType:MessageDetailsViewModel.kt$MessageDetailsViewModel$savedStateHandle.get&lt;String&gt;(EXTRA_MESSAGE_ID)!!</ID>
        <ID>UnsafeCallOnNullableType:MessageItem.kt$message.messageHeader.userId!!</ID>
        <ID>UnsafeCallOnNullableType:MigrateActiveAccountsUseCase.kt$MigrateActiveAccountsUseCase$activeAccount.accessToken?.token!!</ID>
        <ID>UnsafeCallOnNullableType:MigrateActiveAccountsUseCase.kt$MigrateActiveAccountsUseCase$serverConfig.metaData.domain!!</ID>
        <ID>UnsafeCallOnNullableType:OngoingCallViewModel.kt$OngoingCallViewModel$savedStateHandle.get&lt;String&gt;(EXTRA_CONVERSATION_ID)!!</ID>
        <ID>UnsafeCallOnNullableType:OtherUserProfileBottomSheet.kt$conversationSheetState.conversationSheetContent!!</ID>
        <ID>UnsafeCallOnNullableType:OtherUserProfileGroup.kt$state.conversationId!!</ID>
        <ID>UnsafeCallOnNullableType:OtherUserProfileGroup.kt$state.groupState!!</ID>
        <ID>UnsafeCallOnNullableType:OtherUserProfileScreen.kt$lazyListStates[tabItem]!!</ID>
        <ID>UnsafeCallOnNullableType:OtherUserProfileScreenViewModel.kt$OtherUserProfileScreenViewModel$savedStateHandle.get&lt;String&gt;(EXTRA_USER_ID)!!</ID>
        <ID>UnsafeCallOnNullableType:ScalaAppDataBaseProvider.kt$ScalaAppDataBaseProvider$db!!</ID>
        <ID>UnsafeCallOnNullableType:WireButton.kt$trailingIcon!!</ID>
        <ID>CommentSpacing:com.wire.android.ui.userprofile.other.OtherUserProfileScreenViewModelTest.kt:366</ID>
        <ID>CommentSpacing:com.wire.android.ui.userprofile.other.OtherUserProfileScreenViewModelTest.kt:385</ID>
        <ID>LibraryCodeMustSpecifyReturnType:AccountSwitchUseCaseTest.kt$AccountSwitchUseCaseTest$@Suppress("MaxLineLength") @Test fun `given current session is valid and there are no other sessions, when SwitchToNextAccountOrWelcome , then update current session and the user is navigated to the welcome screen`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:AccountSwitchUseCaseTest.kt$AccountSwitchUseCaseTest$@Suppress("MaxLineLength") @Test fun `given current session is valid, when SwitchToAccount is called , then update current session and the user is navigated to the home screen`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:AccountSwitchUseCaseTest.kt$AccountSwitchUseCaseTest$@Test fun `given current session is invalid , when switching to account , then update current session and delete the old one`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:AvatarPickerViewModelTest.kt$AvatarPickerViewModelTest$@Test fun `given a navigation case, when going back requested, then should delegate call to manager navigateBack`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:AvatarPickerViewModelTest.kt$AvatarPickerViewModelTest$@Test fun `given a valid image, when uploading the asset fails, then should emit an error`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:AvatarPickerViewModelTest.kt$AvatarPickerViewModelTest$@Test fun `given a valid image, when uploading the asset succeeds, then the useCase should be called and navigate back on success`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModelTest.kt$BackupAndRestoreViewModelTest$@Test fun givenACreatedBackup_whenSavingIt_thenTheStateIsReset()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModelTest.kt$BackupAndRestoreViewModelTest$@Test fun givenANonEmptyPassword_whenCreatingABackupWithAGivenError_thenItReturnsAFailure()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModelTest.kt$BackupAndRestoreViewModelTest$@Test fun givenANonEmptyPassword_whenCreatingABackup_thenItCreatesItSuccessfully()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModelTest.kt$BackupAndRestoreViewModelTest$@Test fun givenANonEncryptedBackup_whenChoosingIt_thenTheRestoreProgressUpdatesCorrectly()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModelTest.kt$BackupAndRestoreViewModelTest$@Test fun givenAPasswordEncryptedBackup_whenRestoringABackupWithAnIOError_thenTheCorrectErrorDialogIsShown()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModelTest.kt$BackupAndRestoreViewModelTest$@Test fun givenAPasswordEncryptedBackup_whenRestoringAnIncompatibleBackup_thenTheCorrectErrorDialogIsShown()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModelTest.kt$BackupAndRestoreViewModelTest$@Test fun givenAPasswordEncryptedBackup_whenRestoringAnInvalidUserIdBackup_thenTheCorrectErrorDialogIsShown()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModelTest.kt$BackupAndRestoreViewModelTest$@Test fun givenAPasswordEncryptedBackup_whenRestoringIt_thenTheCorrectSuccessDialogIsShown()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModelTest.kt$BackupAndRestoreViewModelTest$@Test fun givenAPasswordEncryptedBackup_whenRestoringWithWrongPassword_thenTheCorrectErrorDialogIsShown()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModelTest.kt$BackupAndRestoreViewModelTest$@Test fun givenARestoreDialogShown_whenDismissingIt_thenTheTempImportedBackupPathIsDeleted()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModelTest.kt$BackupAndRestoreViewModelTest$@Test fun givenAStoredBackup_whenThereIsAnErrorImportingTheDB_thenTheRightErrorDialogIsShown()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModelTest.kt$BackupAndRestoreViewModelTest$@Test fun givenAStoredBackup_whenThereIsAnErrorVerifyingItsEncryption_thenTheRightErrorDialogIsShown()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModelTest.kt$BackupAndRestoreViewModelTest$@Test fun givenAStoredEncryptedBackup_whenChoosingIt_thenTheRequirePasswordDialogIsShown()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:BackupAndRestoreViewModelTest.kt$BackupAndRestoreViewModelTest$@Test fun givenAnEmptyPassword_whenCreatingABackup_thenItCreatesItSuccessfully()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ChangeDisplayNameViewModelTest.kt$ChangeDisplayNameViewModelTest$@Test fun `when calling onAnimatedError, should emit animatedNameError false to clean state`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ChangeDisplayNameViewModelTest.kt$ChangeDisplayNameViewModelTest$@Test fun `when navigating back requested, then should delegate call to manager navigateBack`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ChangeDisplayNameViewModelTest.kt$ChangeDisplayNameViewModelTest$@Test fun `when saving the new display name, and fails then should navigate back indicating EXTRA_SETTINGS_DISPLAY_NAME_CHANGED failure`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ChangeDisplayNameViewModelTest.kt$ChangeDisplayNameViewModelTest$@Test fun `when saving the new display name, and ok then should navigate back indicating EXTRA_SETTINGS_DISPLAY_NAME_CHANGED success`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ChangeDisplayNameViewModelTest.kt$ChangeDisplayNameViewModelTest$@Test fun `when validating new name, and the value exceeds 64 chars, then should propagate NameExceedLimitError`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ChangeDisplayNameViewModelTest.kt$ChangeDisplayNameViewModelTest$@Test fun `when validating new name, and the value is the same, then should propagate None`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ChangeDisplayNameViewModelTest.kt$ChangeDisplayNameViewModelTest$@Test fun `when validating new name, and the value is valid, then should propagate None and enable 'continue'`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ChangeDisplayNameViewModelTest.kt$ChangeDisplayNameViewModelTest$@Test fun `when validating new name, and we have an empty value, then should propagate NameEmptyError`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CommonTopAppBarViewModelTest.kt$CommonTopAppBarViewModelTest$@Test fun givenActiveCallAndCallIsMuted_whenGettingState_thenShouldHaveMutedCallInfo()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CommonTopAppBarViewModelTest.kt$CommonTopAppBarViewModelTest$@Test fun givenActiveCallAndCallIsNotMuted_whenGettingState_thenShouldNotHaveMutedCallInfo()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CommonTopAppBarViewModelTest.kt$CommonTopAppBarViewModelTest$@Test fun givenActiveCallAndCallScreenAndConnectivityIssues_whenGettingState_thenShouldHaveConnectivityInfo()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CommonTopAppBarViewModelTest.kt$CommonTopAppBarViewModelTest$@Test fun givenActiveCallAndConnectivityIssueAndSomeOtherScreen_whenGettingState_thenShouldHaveNoInfo()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CommonTopAppBarViewModelTest.kt$CommonTopAppBarViewModelTest$@Test fun givenActiveCallAndHomeScreenAndConnectivityIssues_whenGettingState_thenShouldHaveActiveCallInfo()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CommonTopAppBarViewModelTest.kt$CommonTopAppBarViewModelTest$@Test fun givenNoActiveCallAndHomeScreenAndGathering_whenGettingState_thenShouldHaveConnectingInfo()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:CommonTopAppBarViewModelTest.kt$CommonTopAppBarViewModelTest$@Test fun givenNoActiveCallAndHomeScreenAndSlowSync_whenGettingState_thenShouldHaveConnectingInfo()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConnectionPolicyManagerTest.kt$ConnectionPolicyManagerTest$@Test fun givenCurrentlyActiveSessionAndInitialisedUI_whenHandlingPushNotification_thenShouldNotDowngradePolicy()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConnectionPolicyManagerTest.kt$ConnectionPolicyManagerTest$@Test fun givenCurrentlyActiveSessionAndInitialisedUI_whenHandlingPushNotification_thenShouldUpgradePolicyThenWait()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConnectionPolicyManagerTest.kt$ConnectionPolicyManagerTest$@Test fun givenCurrentlyActiveSessionAndNotInitialisedUI_whenHandlingPushNotification_thenShouldUpgradeThenWaitThenDowngrade()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConnectionPolicyManagerTest.kt$ConnectionPolicyManagerTest$@Test fun givenCurrentlyInactiveSessionAndInitialisedUI_whenHandlingPushNotification_thenShouldUpgradeThenWaitThenDowngrade()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConnectionPolicyManagerTest.kt$ConnectionPolicyManagerTest$@Test fun givenNotCurrentAccountAndNotInitialisedUI_whenHandlingPushNotification_thenShouldUpgradeThenWaitThenDowngradePolicy()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationBannerViewModelTest.kt$ConversationBannerViewModelTest$@Test fun `given a group members, when all of them are internal team members, then banner should be null`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationBannerViewModelTest.kt$ConversationBannerViewModelTest$@Test fun `given a group members, when at least one is not internal team member, then banner should not be null`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationBannerViewModelTest.kt$ConversationBannerViewModelTest$@Test fun `given a one to one conversation, when other user is not internal member, then banner should be null`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationInfoViewModelArrangement.kt$ConversationInfoViewModelArrangement$fun arrange()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationInfoViewModelArrangement.kt$ConversationInfoViewModelArrangement$suspend fun withConversationDetailUpdate(conversationDetails: ConversationDetails)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationInfoViewModelArrangement.kt$ConversationInfoViewModelArrangement$suspend fun withSelfUser()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationInfoViewModelTest.kt$ConversationInfoViewModelTest$@Test fun `given a 1 on 1 conversation, when solving the conversation avatar, then the avatar of the other user is used`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationInfoViewModelTest.kt$ConversationInfoViewModelTest$@Test fun `given a 1 on 1 conversation, when solving the conversation name, then the name of the other user is used`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationInfoViewModelTest.kt$ConversationInfoViewModelTest$@Test fun `given a 1 on 1 conversation, when solving the conversation name, then unavailable user is used`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationInfoViewModelTest.kt$ConversationInfoViewModelTest$@Test fun `given a 1 on 1 conversation, when the user is deleted, then the name of the conversation should be a string resource`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationInfoViewModelTest.kt$ConversationInfoViewModelTest$@Test fun `given a group conversation, when solving the conversation name, then the name of the conversation is used`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationInfoViewModelTest.kt$ConversationInfoViewModelTest$@Test fun `given other user 1on1 message, when clicking on avatar, then open other user profile without group data`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationInfoViewModelTest.kt$ConversationInfoViewModelTest$@Test fun `given other user group message, when clicking on avatar, then open other user profile with group data`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationInfoViewModelTest.kt$ConversationInfoViewModelTest$@Test fun `given self user 1on1 message, when clicking on avatar, then open self profile`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationInfoViewModelTest.kt$ConversationInfoViewModelTest$@Test fun `given self user group message, when clicking on avatar, then open self profile`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationInfoViewModelTest.kt$ConversationInfoViewModelTest$@Test fun `given the conversation name is updated, when solving the conversation name, then the state is updated accordingly`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationInfoViewModelTest.kt$ConversationInfoViewModelTest$@Test fun `given the initial state, when solving the conversation name before the data is received, the name should be an empty string`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationListViewModelTest.kt$ConversationListViewModelTest$@Test fun `given a conversation id, when joining an ongoing call, then verify that answer call usecase is called`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationListViewModelTest.kt$ConversationListViewModelTest$@Test fun `given a conversations list, when opening a conversation, then should delegate call to manager to Conversation with args`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationListViewModelTest.kt$ConversationListViewModelTest$@Test fun `given a conversations list, when opening a new conversation, then should delegate call to manager to NewConversation`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationListViewModelTest.kt$ConversationListViewModelTest$@Test fun `given a valid conversation muting state, when calling block user, then should call BlockUserUseCase`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationListViewModelTest.kt$ConversationListViewModelTest$@Test fun `given a valid conversation muting state, when calling muteConversation, then should call with call the UseCase`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationListViewModelTest.kt$ConversationListViewModelTest$@Test fun `given a valid conversation muting state, when calling unblock user, then should call BlockUserUseCase`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModelArrangement.kt$ConversationMessagesViewModelArrangement$fun arrange()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModelArrangement.kt$ConversationMessagesViewModelArrangement$fun withGetMessageAssetUseCaseReturning(decodedAssetPath: Path, assetSize: Long, assetName: String = "name")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModelArrangement.kt$ConversationMessagesViewModelArrangement$fun withGetMessageByIdReturning(message: Message)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModelArrangement.kt$ConversationMessagesViewModelArrangement$fun withSuccessfulOpenAssetMessage( assetName: String, assetDataPath: Path, assetSize: Long, messageId: String )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModelArrangement.kt$ConversationMessagesViewModelArrangement$fun withSuccessfulSaveAssetMessage( assetName: String, assetDataPath: Path, assetSize: Long, messageId: String )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModelArrangement.kt$ConversationMessagesViewModelArrangement$suspend fun withConversationDetailUpdate(conversationDetails: ConversationDetails)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModelArrangement.kt$ConversationMessagesViewModelArrangement$suspend fun withPaginatedMessagesReturning(pagingDataFlow: PagingData&lt;UIMessage&gt;)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModelArrangement.kt$ConversationMessagesViewModelArrangement$val conversationDetailsChannel = Channel&lt;ConversationDetails&gt;(capacity = Channel.UNLIMITED)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModelTest.kt$ConversationMessagesViewModelTest$@Test @Disabled fun `given a message with failed decryption, when resetting the session, then should call ResetSessionUseCase`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModelTest.kt$ConversationMessagesViewModelTest$@Test fun `given a message and a reaction, when toggleReaction is called, then should call ToggleReactionUseCase`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModelTest.kt$ConversationMessagesViewModelTest$@Test fun `given an asset message, when downloading to external storage, then the file manager downloads the asset and closes the dialog`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModelTest.kt$ConversationMessagesViewModelTest$@Test fun `given an asset message, when opening it, then the file manager open function gets invoked and closes the dialog`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModelTest.kt$ConversationMessagesViewModelTest$@Test fun `given an message ID, when downloading or fetching into internal storage, then should get message details by ID`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ConversationMessagesViewModelTest.kt$ConversationMessagesViewModelTest$@Test fun `given the PagingData is updated, when getting paging flow, then the update is propagated in the state`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessorTest.kt$DeepLinkProcessorTest$@Test fun `given a incoming call deeplink, returns IncomingCall with conversationId`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessorTest.kt$DeepLinkProcessorTest$@Test fun `given a invalid deeplink, returns Unknown object`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessorTest.kt$DeepLinkProcessorTest$@Test fun `given a remote config deeplink with null parameters, returns DeeplinkResult-Unknown `()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessorTest.kt$DeepLinkProcessorTest$@Test fun `given a sso login failure deeplink with null parameters, returns SSOLogin-Failure with unknown error`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessorTest.kt$DeepLinkProcessorTest$@Test fun `given a sso login success deeplink with null parameters, returns SSOLogin-Failure with unknown error`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessorTest.kt$DeepLinkProcessorTest$@Test fun `given a valid failed sso login deeplink, returns SSOLogin-Failure object`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessorTest.kt$DeepLinkProcessorTest$@Test fun `given a valid remote config deeplink, returns CustomServerConfig object`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:DeepLinkProcessorTest.kt$DeepLinkProcessorTest$@Test fun `given a valid success sso login deeplink, returns SSOLogin-Success object`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:EncodedMessageContentMapperTest.kt$EncodedMessageContentMapperTest$@Test fun givenAssetContent_whenMappingToUIMessageContent_thenCorrectValuesShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:EncodedMessageContentMapperTest.kt$EncodedMessageContentMapperTest$@Test fun givenMemberDetails_whenMappingToSystemMessageMemberName_thenCorrectValuesShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:EncodedMessageContentMapperTest.kt$EncodedMessageContentMapperTest$@Test fun givenMessagesWithDifferentVisibilities_whenMappingToUIMessageContent_thenCorrectValuesShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:EncodedMessageContentMapperTest.kt$EncodedMessageContentMapperTest$@Test fun givenPNGImageAssetContentWith0Width_whenMappingToUIMessageContent_thenIsMappedToAssetMessage()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:EncodedMessageContentMapperTest.kt$EncodedMessageContentMapperTest$@Test fun givenSVGImageAssetContent_whenMappingToUIMessageContent_thenIsMappedToAssetMessage()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:EncodedMessageContentMapperTest.kt$EncodedMessageContentMapperTest$@Test fun givenServerContent_whenMappingToUIMessageContent_thenCorrectValuesShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:EncodedMessageContentMapperTest.kt$EncodedMessageContentMapperTest$@Test fun givenTextOrNullContent_whenMappingToTextMessageContent_thenCorrectValuesShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:EncodedMessageContentMapperTest.kt$EncodedMessageContentMapperTest.Companion$val fakeKaliumFileSystem = FakeKaliumFileSystem()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:EncodedMessageContentMapperTest.kt$EncodedMessageContentMapperTest.Companion$val sender = OtherUser( id = QualifiedID( value = "someSearchQuery", domain = "wire.com", ), name = null, handle = null, email = null, phone = null, accentId = 0, teamId = null, connectionStatus = ConnectionState.ACCEPTED, previewPicture = null, completePicture = null, availabilityStatus = UserAvailabilityStatus.NONE, userType = UserType.FEDERATED, botService = null, deleted = false )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FakeKaliumFileSystem.kt$FakeKaliumFileSystem$override fun copy(sourcePath: Path, targetPath: Path)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FakeKaliumFileSystem.kt$FakeKaliumFileSystem$override fun createDirectories(dir: Path)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FakeKaliumFileSystem.kt$FakeKaliumFileSystem$override fun createDirectory(dir: Path, mustCreate: Boolean)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FakeKaliumFileSystem.kt$FakeKaliumFileSystem$override fun delete(path: Path, mustExist: Boolean)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:FakeKaliumFileSystem.kt$FakeKaliumFileSystem$override fun deleteContents(dir: Path, mustExist: Boolean)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsViewModelTest.kt$GroupConversationDetailsViewModelTest$@Test fun `given a group conversation, then conversationSheetContent is valid`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsViewModelTest.kt$GroupConversationDetailsViewModelTest$@Test fun `given a group conversation, when self is admin and in owner team, then should be able to edit Guests option`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsViewModelTest.kt$GroupConversationDetailsViewModelTest$@Test fun `given a group conversation, when self is admin and not in owner team, then should not be able to edit Guests option`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsViewModelTest.kt$GroupConversationDetailsViewModelTest$@Test fun `given a group conversation, when solving the conversation name, then the name of the conversation is used`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsViewModelTest.kt$GroupConversationDetailsViewModelTest$@Test fun `given a group conversation, when solving the state, then the state is correct`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsViewModelTest.kt$GroupConversationDetailsViewModelTest$@Test fun `given the conversation name is updated, when solving the conversation name, then the state is updated accordingly`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsViewModelTest.kt$GroupConversationDetailsViewModelTest$@Test fun `when disable Guests guest dialog conferment, then use case is called with the correct values`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsViewModelTest.kt$GroupConversationDetailsViewModelTest$@Test fun `when disable Service guest dialog conferment, then use case is called with the correct values`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsViewModelTest.kt$GroupConversationDetailsViewModelTest$@Test fun `when disabling Guests , then the dialog must state must be updated`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsViewModelTest.kt$GroupConversationDetailsViewModelTest$@Test fun `when disabling Services , then the dialog must state must be updated`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsViewModelTest.kt$GroupConversationDetailsViewModelTest$@Test fun `when enabling Guests, then use case is called with the correct values`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsViewModelTest.kt$GroupConversationDetailsViewModelTest$@Test fun `when enabling Services, use case is called with the correct values`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsViewModelTest.kt$GroupConversationDetailsViewModelTest.Companion$val dummyConversationId = ConversationId("some-dummy-value", "some.dummy.domain")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationDetailsViewModelTest.kt$GroupConversationDetailsViewModelTest.Companion$val testGroup = ConversationDetails.Group( Conversation( id = dummyConversationId, name = "Conv Name", type = Conversation.Type.ONE_ON_ONE, teamId = TeamId("team_id"), protocol = Conversation.ProtocolInfo.Proteus, mutedStatus = MutedConversationStatus.AllAllowed, removedBy = null, lastNotificationDate = null, lastModifiedDate = null, access = listOf(Conversation.Access.CODE, Conversation.Access.INVITE), accessRole = listOf(Conversation.AccessRole.NON_TEAM_MEMBER, Conversation.AccessRole.GUEST), lastReadDate = "2022-04-04T16:11:28.388Z", creatorId = null, receiptMode = Conversation.ReceiptMode.ENABLED ), legalHoldStatus = LegalHoldStatus.DISABLED, hasOngoingCall = false, lastMessage = null, isSelfUserCreator = false, isSelfUserMember = true, unreadEventCount = emptyMap(), selfRole = Conversation.Member.Role.Member )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationParticipantsViewModelTest.kt$GroupConversationParticipantsViewModelTest$@Test fun `given a group members, when clicking on other profile, then navigate to other profile screen`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:GroupConversationParticipantsViewModelTest.kt$GroupConversationParticipantsViewModelTest$@Test fun `given a group members, when clicking on self profile, then navigate to self profile screen`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ImageAssetTest.kt$ImageAssetTest$fun createPrivateAsset( conversationId: ConversationId, messageId: String, isSelfAsset: Boolean )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ImageAssetTest.kt$ImageAssetTest$fun createUserAvatarAsset(userAssetId: UserAssetId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:IncomingCallViewModelTest.kt$IncomingCallViewModelTest$@Test fun `given an active call, when accepting a new incoming call, then end the current call and accept the newer one`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:InitialSyncViewModelTest.kt$InitialSyncViewModelTest$@Test fun `given sync is live, when observing initial sync state, then navigate home`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:InitialSyncViewModelTest.kt$InitialSyncViewModelTest$@Test fun `given sync is not live, when observing initial sync state, then stay on this screen`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:InitiatingCallViewModelTest.kt$InitiatingCallViewModelTest$@Test fun `given a start call error, when user tries to start a call, call ring tone is not called`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:InitiatingCallViewModelTest.kt$InitiatingCallViewModelTest$@Test fun `given an outgoing call, when the user ends call, then invoke endCall useCase and close the screen`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginEmailViewModelTest.kt$LoginEmailViewModelTest.Companion$val AUTH_TOKEN = AuthTokens( userId = UserId("user_id", "domain"), accessToken = "access_token", refreshToken = "refresh_token", tokenType = "token_type", cookieLabel = "cookie_label" )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginEmailViewModelTest.kt$LoginEmailViewModelTest.Companion$val CLIENT = Client( CLIENT_ID, ClientType.Permanent, "time", null, null, "label", "cookie", null, "model", emptyMap() )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginEmailViewModelTest.kt$LoginEmailViewModelTest.Companion$val CLIENT_ID = ClientId("test")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginEmailViewModelTest.kt$LoginEmailViewModelTest.Companion$val SERVER_CONFIG = ServerConfig( id = "config", links = ServerConfig.Links( api = "https://server-apiBaseUrl.de", accounts = "https://server-accountBaseUrl.de", webSocket = "https://server-webSocketBaseUrl.de", blackList = "https://server-blackListUrl.de", teams = "https://server-teamsUrl.de", website = "https://server-websiteUrl.de", title = "server-title", false, apiProxy = null ), metaData = ServerConfig.MetaData( commonApiVersion = CommonApiVersionType.Valid(1), domain = "domain.com", federation = false ) )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginSSOViewModelTest.kt$LoginSSOViewModelTest.Companion$val AUTH_TOKEN = AuthTokens( userId = UserId("user_id", "domain"), accessToken = "access_token", refreshToken = "refresh_token", tokenType = "token_type", cookieLabel = null )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginSSOViewModelTest.kt$LoginSSOViewModelTest.Companion$val CLIENT = Client( CLIENT_ID, ClientType.Permanent, "time", null, null, "label", "cookie", null, "model", emptyMap() )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginSSOViewModelTest.kt$LoginSSOViewModelTest.Companion$val CLIENT_ID = ClientId("test")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:LoginSSOViewModelTest.kt$LoginSSOViewModelTest.Companion$val SERVER_CONFIG = ServerConfig( id = "config", links = ServerConfig.Links( api = "https://server-apiBaseUrl.de", accounts = "https://server-accountBaseUrl.de", webSocket = "https://server-webSocketBaseUrl.de", blackList = "https://server-blackListUrl.de", teams = "https://server-teamsUrl.de", website = "https://server-websiteUrl.de", title = "server-title", false, apiProxy = null ), metaData = ServerConfig.MetaData( commonApiVersion = CommonApiVersionType.Valid(1), domain = "domain.com", federation = false ) )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MediaGalleryViewModelTest.kt$MediaGalleryViewModelTest$@Test fun givenACorrectRequest_whenUserSavesAnImage_theUseCaseGetsInvokedCorrectlyAndASuccessValueIsReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MediaGalleryViewModelTest.kt$MediaGalleryViewModelTest$@Test fun givenACorrectSetup_whenUserDeletesAnImage_navigationBackIsCalled()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MediaGalleryViewModelTest.kt$MediaGalleryViewModelTest$@Test fun givenACorrectSetup_whenUserTriesNavigateBack_navigateBackGetsInvokedOnNavigationManager()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MediaGalleryViewModelTest.kt$MediaGalleryViewModelTest$@Test fun givenACorrectSetup_whenUserTriesToDeleteAnImage_DeleteDialogIsShown()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MediaGalleryViewModelTest.kt$MediaGalleryViewModelTest$@Test fun givenAFailedRequest_whenUserTriesToSaveAnImage_aFailureValueIsReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MediaGalleryViewModelTest.kt$MediaGalleryViewModelTest$@Test fun givenCurrentSetup_whenInitialisingViewModel_thenScreenTitleMatchesTheConversationName()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MediaGalleryViewModelTest.kt$MediaGalleryViewModelTest$@Test fun givenErrorWhileDelete_whenUserDeletesAnImage_errorIsShown()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MediaGalleryViewModelTest.kt$MediaGalleryViewModelTest.Companion$val dummyConversationId = QualifiedID("a-value", "a-domain")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MediaGalleryViewModelTest.kt$MediaGalleryViewModelTest.Companion$val fakeKaliumFileSystem = FakeKaliumFileSystem()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerStateTest.kt$MessageComposerInnerStateTest$// case was found by manual testing @Test fun `given cursor is at the begin of new line, when add mention button clicked, then mention is requested`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerStateTest.kt$MessageComposerInnerStateTest$// case was found by manual testing @Test fun `given cursor is at the begin of new line, when mention symbol is added, then mention is requested`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerStateTest.kt$MessageComposerInnerStateTest$// case was found by manual testing @Test fun `given message starts from mention, when mention symbol is removed, then mention is not requested anymore`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerStateTest.kt$MessageComposerInnerStateTest$// case was found by manual testing @Test fun `given selection goes just before mention symbol, then mention is not requested`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerStateTest.kt$MessageComposerInnerStateTest$@Test fun `given mention is started in message, then mention is queried with corresponding query`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerStateTest.kt$MessageComposerInnerStateTest$@Test fun `given mention is started in message, when user type space, then mention stop querying`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerStateTest.kt$MessageComposerInnerStateTest$@Test fun `given some message, when mention symbol is added into message, then mention is queried`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerStateTest.kt$MessageComposerInnerStateTest$@Test fun `given some message, when mention symbol is added without space before it, then mention is not queried`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerStateTest.kt$MessageComposerInnerStateTest$@Test fun `given some text, when editing the message, input text changes to the original message text`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerStateTest.kt$MessageComposerInnerStateTest$@Test fun `when mention selected, then mention is added into list`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerStateTest.kt$MessageComposerInnerStateTest$@Test fun `when mention-text was edited, then mention is removed from the list`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerStateTest.kt$MessageComposerInnerStateTest$@Test fun `when text before mention was changed 2, then mention's position is updated`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerStateTest.kt$MessageComposerInnerStateTest$@Test fun `when text before mention was changed, then mention's position is updated`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerInnerStateTest.kt$MessageComposerInnerStateTest.Companion$fun createState(context: Context, focusManager: FocusManager)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModelTest.kt$MessageComposerViewModelTest$@Test fun `given a failure, when deleting messages, then the delete dialog state is closed`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModelTest.kt$MessageComposerViewModelTest$@Test fun `given a failure, when deleting messages, then the error state is updated`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModelTest.kt$MessageComposerViewModelTest$@Test fun `given a user sends an image message larger than 15MB, when invoked, then sendAssetMessageUseCase isn't called`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModelTest.kt$MessageComposerViewModelTest$@Test fun `given that a free user sends an asset message larger than 25MB, when invoked, then sendAssetMessageUseCase isn't called`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModelTest.kt$MessageComposerViewModelTest$@Test fun `given that a team user sends an asset message larger than 25MB, when invoked, then sendAssetMessageUseCase is called`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModelTest.kt$MessageComposerViewModelTest$@Test fun `given the user picks a null attachment, when invoking sendAttachmentMessage, no use case gets called`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModelTest.kt$MessageComposerViewModelTest$@Test fun `given the user sends an asset message, when invoked, then sendAssetMessageUseCase gets called`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModelTest.kt$MessageComposerViewModelTest$@Test fun `given the user sends an image message, when invoked, then sendAssetMessageUseCase gets called`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModelTest.kt$MessageComposerViewModelTest$@Test fun `validate deleteMessageDialogsState states when deleteMessageDialog is visible for my message`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModelTest.kt$MessageComposerViewModelTest$@Test fun `validate deleteMessageDialogsState states when deleteMessageDialog is visible for others message`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageComposerViewModelTest.kt$MessageComposerViewModelTest$@Test fun `validate deleteMessageDialogsState states when deleteMessageForYourselfDialog is visible`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageMapperTest.kt$MessageMapperTest$@Test fun givenMessageList_whenMappingToUIMessages_thenCorrectValuesShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessageMapperTest.kt$MessageMapperTest$@Test fun givenMessagesList_whenGettingMemberIdList_thenReturnCorrectList()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$@Test fun givenLastAssetAudioConversationMessage_whenMappingToUILastMessageContent_thenCorrectContentShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$@Test fun givenLastAssetImageConversationMessage_whenMappingToUILastMessageContent_thenCorrectContentShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$@Test fun givenLastAssetVideoConversationMessage_whenMappingToUILastMessageContent_thenCorrectContentShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$@Test fun givenLastConversationKnockMessage_whenMappingToUILastMessageContent_thenCorrectContentShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$@Test fun givenLastConversationRenamedMessage_whenMappingToUILastMessageContent_thenCorrectContentShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$@Test fun givenMissedCalls_whenMappingToUIPreview_thenCorrectUILastMessageContentShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$@Test fun givenMultipleUnreadEvents_whenMappingToUIPreview_thenCorrectSortedUILastMessageContentShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$@Test fun givenSelfAndOtherUserWasRemovedFromConversationMessage_whenMappingToUILastMessageContent_thenCorrectContentShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$@Test fun givenSelfUserWasRemovedFromConversationMessage_whenMappingToUILastMessageContent_thenCorrectContentShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$@Test fun givenUnreadMentions_whenMappingToUIPreview_thenCorrectUILastMessageContentShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$@Test fun givenUnreadMessages_whenMappingToUIPreview_thenLastTextMessageContentShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$@Test fun givenUnreadPings_whenMappingToUIPreview_thenCorrectUILastMessageContentShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$@Test fun givenUnreadReplies_whenMappingToUIPreview_thenCorrectUILastMessageContentShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$@Test fun givenUserJoinedConversationMessage_whenMappingToUILastMessageContent_thenCorrectContentShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MessagePreviewContentMapperTest.kt$MessagePreviewContentMapperTest$@Test fun givenUserLeftConversationMessage_whenMappingToUILastMessageContent_thenCorrectContentShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrateClientsDataUseCaseTest.kt$MigrateClientsDataUseCaseTest$@TempDir val proteusDir = File("proteus")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrateClientsDataUseCaseTest.kt$MigrateClientsDataUseCaseTest$@Test fun `given federated server when fixing session files then set proper user domain`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrateClientsDataUseCaseTest.kt$MigrateClientsDataUseCaseTest$@Test fun `given not federated server when fixing session files then set current user domain`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrateClientsDataUseCaseTest.kt$MigrateClientsDataUseCaseTest$@Test fun `given session directory with files when getting session files without domain return proper list`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrateClientsDataUseCaseTest.kt$MigrateClientsDataUseCaseTest$@Test fun `given session file name without domain when fixing session file names then return updated session file with domain`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrateClientsDataUseCaseTest.kt$MigrateClientsDataUseCaseTest$@Test fun `given session file with domain when renaming if needed then do nothing with the file name`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrateClientsDataUseCaseTest.kt$MigrateClientsDataUseCaseTest$@Test fun `given session file without domain when renaming if needed then add domain to the file name`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrateServerConfigUseCaseTest.kt$MigrateServerConfigUseCaseTest$@Test fun givenConfigUrlDataAndSuccessfulRequests_whenRetrievingServerConfig_thenMakeProperRequestsAndSaveWithSuccess()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrateServerConfigUseCaseTest.kt$MigrateServerConfigUseCaseTest$@Test fun givenFullDataAndSuccessfulRequests_whenRetrievingServerConfig_thenSaveWithSuccess()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrateServerConfigUseCaseTest.kt$MigrateServerConfigUseCaseTest$@Test fun givenLinksDataAndSuccessfulRequests_whenRetrievingServerConfig_thenMakeProperRequestsAndSaveWithSuccess()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrateServerConfigUseCaseTest.kt$MigrateServerConfigUseCaseTest$@Test fun givenNoData_whenRetrievingServerConfig_thenDoNotSaveAndReturnNoData()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrationManagerTest.kt$MigrationManagerTest$@Test fun givenDBFileExistsAndMigrationCompleted_whenCheckingWhetherToMigrate_thenReturnFalse()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrationManagerTest.kt$MigrationManagerTest$@Test fun givenDBFileExistsAndMigrationNotCompleted_whenCheckingWhetherToMigrate_thenReturnTrue()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrationManagerTest.kt$MigrationManagerTest$@Test fun givenDBFileNotExistsAndMigrationCompleted_whenCheckingWhetherToMigrate_thenReturnFalse()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MigrationManagerTest.kt$MigrationManagerTest$@Test fun givenDBFileNotExistsAndMigrationNotCompleted_whenCheckingWhetherToMigrate_thenSetMigrationCompletedAndReturnFalse()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MyAccountViewModelTest.kt$MyAccountViewModelTest$@Test fun `when navigating back requested, then should delegate call to manager navigateBack`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MyAccountViewModelTest.kt$MyAccountViewModelTest$@Test fun `when trying to compute if the user requires password, and fails then should not load forgot password url context`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MyAccountViewModelTest.kt$MyAccountViewModelTest$@Test fun `when user does not requires password, then should not load forgot password url context`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:MyAccountViewModelTest.kt$MyAccountViewModelTest$@Test fun `when user requires a password, then should load forgot password url context`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NewConversationViewModelTest.kt$NewConversationViewModelTest$@Test fun `given no failure, when creating group, then options state should have no error`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NewConversationViewModelTest.kt$NewConversationViewModelTest$@Test fun `given self is not a team member, when creating group, then the group is created with the correct values`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NewConversationViewModelTest.kt$NewConversationViewModelTest$@Test fun `given sync failure, when creating group, then should update options state with connectivity error`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:NewConversationViewModelTest.kt$NewConversationViewModelTest$@Test fun `given unknown failure, when creating group, then should update options state with unknown error`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ObserveConversationMembersByTypesUseCaseTest.kt$ObserveConversationMembersByTypesUseCaseTest$@Test fun `given a group members, when there are external members, then set should contain external type`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ObserveConversationMembersByTypesUseCaseTest.kt$ObserveConversationMembersByTypesUseCaseTest$@Test fun `given a group members, when there are federated members, then set should contain federated type`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ObserveConversationMembersByTypesUseCaseTest.kt$ObserveConversationMembersByTypesUseCaseTest$@Test fun `given a group members, when there are guest members, then set should contain guest type`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ObserveConversationMembersByTypesUseCaseTest.kt$ObserveConversationMembersByTypesUseCaseTest$@Test fun `given a group members, when there are service bots, then set should contain service type`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ObserveParticipantsForConversationUseCaseTest.kt$ObserveParticipantsForConversationUseCaseTest$@Test fun `given a group members, when solving the participants list with limit, then limited sizes are passed`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ObserveParticipantsForConversationUseCaseTest.kt$ObserveParticipantsForConversationUseCaseTest$@Test fun `given a group members, when solving the participants list without limit, then all lists are passed`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherAccountMapperTest.kt$OtherAccountMapperTest$@Test fun givenSelfUsersAndTeams_whenMappingToOtherAccounts_thenCorrectValuesShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest$@Test fun `given a conversationId, when trying to open the conversation and fails, then returns a Failure result and update error state`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest$@Test fun `given a conversationId, when trying to open the conversation, then returns a Success result with the conversation`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest$@Test fun `given a group conversationId and a failed response when changing the role, then show info message`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest$@Test fun `given a group conversationId, when changing the role, then the request should be configured correctly`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest$@Test fun `given a group conversationId, when loading the data, then return group state`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest$@Test fun `given a navigation case, when going back requested, then should delegate call to manager navigateBack`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest$@Test fun `given a userId, when accepting a connection request, then returns a Success result and update view state`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest$@Test fun `given a userId, when blocking user fails, then show error message and dismiss BlockDialog`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest$@Test fun `given a userId, when blocking user is succeed, then show Success message and dismiss BlockDialog`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest$@Test fun `given a userId, when canceling a connection request, then returns a Success result and update view state`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest$@Test fun `given a userId, when ignoring a connection request, then returns a Success result and update view state`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest$@Test fun `given a userId, when sending a connection request a fails, then returns a Failure result and show error message`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest$@Test fun `given a userId, when sending a connection request, then returns a Success result and update view state`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest$@Test fun `given connected user AND direct conversation data error, when click on menu button, then the other data is displayed`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest$@Test fun `given connected user, when click on menu button, then direct conversation data is requested`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest$@Test fun `given no conversationId, when loading the data, then return null group state`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest$@Test fun `given not connected user, then direct conversation is not requested`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest.Companion$val CONVERSATION = Conversation( id = CONVERSATION_ID, name = "some_name", type = Conversation.Type.ONE_ON_ONE, teamId = null, protocol = Conversation.ProtocolInfo.Proteus, mutedStatus = MutedConversationStatus.AllAllowed, removedBy = null, lastNotificationDate = null, lastModifiedDate = null, lastReadDate = "2022-04-04T16:11:28.388Z", access = listOf(Conversation.Access.INVITE), accessRole = listOf(Conversation.AccessRole.NON_TEAM_MEMBER), creatorId = null, receiptMode = Conversation.ReceiptMode.ENABLED )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest.Companion$val CONVERSATION_ID = ConversationId("some_value", "some_domain")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest.Companion$val CONVERSATION_ROLE_DATA = ConversationRoleData( "some_name", Member.Role.Member, Member.Role.Member, CONVERSATION_ID )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest.Companion$val OTHER_USER = OtherUser( USER_ID, "some_name", "some_handle", "some_email", "some_phone", 1, TeamId("some_team"), ConnectionState.NOT_CONNECTED, null, null, UserType.INTERNAL, UserAvailabilityStatus.AVAILABLE, null, false )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest.Companion$val TEAM = Team("some_id", "name", "icon")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:OtherUserProfileScreenViewModelTest.kt$OtherUserProfileScreenViewModelTest.Companion$val USER_ID = UserId("some_value", "some_domain")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:RegisterDeviceViewModelTest.kt$RegisterDeviceViewModelTest.Companion$val CLIENT = Client( CLIENT_ID, ClientType.Permanent, "time", null, null, "label", "cookie", null, "model", emptyMap() )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:RegisterDeviceViewModelTest.kt$RegisterDeviceViewModelTest.Companion$val CLIENT_ID = ClientId("test")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaBackendPreferencesTest.kt$ScalaBackendPreferencesTest$@Test fun `given optional empty url when fetching scala backend data then return null`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaBackendPreferencesTest.kt$ScalaBackendPreferencesTest$@Test fun `given optional url when fetching scala backend data then extract proper url from the string`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScalaBackendPreferencesTest.kt$ScalaBackendPreferencesTest$@Test fun `given regular url when fetching scala backend data then return this url`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScreenStateObserverTest.kt$ScreenStateObserverTest$@Test fun `given a intent action screen off, when observing screen state, should emit false`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScreenStateObserverTest.kt$ScreenStateObserverTest$@Test fun `given a intent action screen on, when observing screen state, should emit true`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScreenStateObserverTest.kt$ScreenStateObserverTest$@Test fun `given screen is initially off, when observing screen state, then initial value should be emit false`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:ScreenStateObserverTest.kt$ScreenStateObserverTest$@Test fun `given screen is initially on, when observing screen state, then initial value should be emit true`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:SelfDevicesViewModelTest.kt$SelfDevicesViewModelTest$@Test fun `given a self client id, when fetching self clients, then returns devices list without current device`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:Stubs.kt$fun newServerConfig(id: Int)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestClient.kt$TestClient$val CLIENT = Client( CLIENT_ID, ClientType.Permanent, "time", null, null, "label", "cookie", null, "model", emptyMap() )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestClient.kt$TestClient$val CLIENT_ID = ClientId("test")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestConnection.kt$TestConnection$val CONNECTION = Connection( TestConversation.ID.value, "FROM", "2022-03-30T15:36:00.000Z", TestConversation.ID, TestUser.USER_ID, ConnectionState.SENT, TestUser.OTHER_USER.id.value, TestUser.OTHER_USER )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestConversation.kt$TestConversation$fun GROUP(protocolInfo: ProtocolInfo = ProtocolInfo.Proteus)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestConversation.kt$TestConversation$fun id(suffix: Int = 0)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestConversation.kt$TestConversation$fun one_on_one(convId: ConversationId)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestConversation.kt$TestConversation$val CONVERSATION = Conversation( ConversationId("conv_id", "domain"), "ONE_ON_ONE Name", Conversation.Type.ONE_ON_ONE, TestTeam.TEAM_ID, ProtocolInfo.Proteus, MutedConversationStatus.AllAllowed, null, null, null, access = listOf(Conversation.Access.CODE, Conversation.Access.INVITE), accessRole = listOf(Conversation.AccessRole.NON_TEAM_MEMBER, Conversation.AccessRole.GUEST), lastReadDate = "2022-03-30T15:36:00.000Z", creatorId = null, receiptMode = Conversation.ReceiptMode.ENABLED )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestConversation.kt$TestConversation$val GROUP_ID = GroupID("mlsGroupId")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestConversation.kt$TestConversation$val ID = ConversationId("valueConvo", "domainConvo")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestConversation.kt$TestConversation$val MEMBER_TEST1 = Member(USER_1, Member.Role.Admin)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestConversation.kt$TestConversation$val MEMBER_TEST2 = Member(USER_2, Member.Role.Member)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestConversation.kt$TestConversation$val ONE_ON_ONE = Conversation( ID.copy(value = "1O1 ID"), "ONE_ON_ONE Name", Conversation.Type.ONE_ON_ONE, TestTeam.TEAM_ID, ProtocolInfo.Proteus, MutedConversationStatus.AllAllowed, null, null, null, lastReadDate = "2022-03-30T15:36:00.000Z", access = listOf(Conversation.Access.CODE, Conversation.Access.INVITE), accessRole = listOf(Conversation.AccessRole.NON_TEAM_MEMBER, Conversation.AccessRole.GUEST), creatorId = null, receiptMode = Conversation.ReceiptMode.ENABLED )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestConversation.kt$TestConversation$val SELF = Conversation( ID.copy(value = "SELF ID"), "SELF Name", Conversation.Type.SELF, TestTeam.TEAM_ID, ProtocolInfo.Proteus, MutedConversationStatus.AllAllowed, null, null, null, lastReadDate = "2022-03-30T15:36:00.000Z", access = listOf(Conversation.Access.CODE, Conversation.Access.INVITE), accessRole = listOf(Conversation.AccessRole.NON_TEAM_MEMBER, Conversation.AccessRole.GUEST), creatorId = null, receiptMode = Conversation.ReceiptMode.ENABLED )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestConversation.kt$TestConversation$val USER_1 = UserId("member1", "domainMember")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestConversation.kt$TestConversation$val USER_2 = UserId("member2", "domainMember")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestConversationDetails.kt$TestConversationDetails$val CONNECTION = ConversationDetails.Connection( TestConversation.ID, TestUser.OTHER_USER, UserType.EXTERNAL, "2022-03-30T15:36:00.000Z", TestConnection.CONNECTION, protocolInfo = ProtocolInfo.Proteus, access = listOf(Conversation.Access.CODE, Conversation.Access.INVITE), accessRole = listOf(Conversation.AccessRole.NON_TEAM_MEMBER, Conversation.AccessRole.GUEST) )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestConversationDetails.kt$TestConversationDetails$val CONVERSATION_ONE_ONE = ConversationDetails.OneOne( TestConversation.ONE_ON_ONE, TestUser.OTHER_USER, LegalHoldStatus.DISABLED, UserType.EXTERNAL, lastMessage = null, unreadEventCount = emptyMap() )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestConversationDetails.kt$TestConversationDetails$val GROUP = ConversationDetails.Group( TestConversation.ONE_ON_ONE, LegalHoldStatus.DISABLED, lastMessage = null, isSelfUserCreator = true, isSelfUserMember = true, unreadEventCount = emptyMap(), selfRole = Conversation.Member.Role.Member )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestDispatcherProvider.kt$TestDispatcherProvider$override fun default()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestDispatcherProvider.kt$TestDispatcherProvider$override fun io()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestDispatcherProvider.kt$TestDispatcherProvider$override fun main()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestDispatcherProvider.kt$TestDispatcherProvider$override fun unconfined()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestMessage.kt$TestMessage$fun buildAssetMessage(assetContent: AssetContent)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestMessage.kt$TestMessage$val ASSET_IMAGE_CONTENT = AssetContent( 0L, "name", "image/jpg", AssetContent.AssetMetadata.Image(100, 100), DUMMY_ASSET_REMOTE_DATA, Message.UploadStatus.NOT_UPLOADED, Message.DownloadStatus.NOT_DOWNLOADED )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestMessage.kt$TestMessage$val ASSET_MESSAGE = Message.Regular( id = "messageID", content = MessageContent.Asset(ASSET_IMAGE_CONTENT), conversationId = ConversationId("convo-id", "convo.domain"), date = "some-date", senderUserId = UserId("user-id", "domain"), senderClientId = ClientId("client-id"), status = Message.Status.SENT, editStatus = Message.EditStatus.NotEdited )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestMessage.kt$TestMessage$val DUMMY_ASSET_REMOTE_DATA = AssetContent.RemoteData( otrKey = ByteArray(0), sha256 = ByteArray(16), assetId = "asset-id", assetToken = "==some-asset-token", assetDomain = "some-asset-domain.com", encryptionAlgorithm = MessageEncryptionAlgorithm.AES_GCM )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestMessage.kt$TestMessage$val IMAGE_ASSET_MESSAGE_DATA_TEST = AssetMessageContentMetadata( AssetContent( 100L, "dummy_data.tiff", "image/tiff", AssetContent.AssetMetadata.Image(50, 50), AssetContent.RemoteData(ByteArray(16), ByteArray(16), "asset-id", "token", "domain.com", MessageEncryptionAlgorithm.AES_CBC), Message.UploadStatus.NOT_UPLOADED, Message.DownloadStatus.NOT_DOWNLOADED ) )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestMessage.kt$TestMessage$val MEMBER_REMOVED_MESSAGE = Message.System( id = "messageID", content = MessageContent.MemberChange.Removed(listOf(UserId("user-id", "domain"))), conversationId = ConversationId("convo-id", "convo.domain"), date = "some-date", senderUserId = UserId("user-id", "domain"), status = Message.Status.SENT )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestMessage.kt$TestMessage$val MISSED_CALL_MESSAGE = Message.System( id = "messageID", content = MessageContent.MissedCall, conversationId = ConversationId("convo-id", "convo.domain"), date = "some-date", senderUserId = UserId("user-id", "domain"), status = Message.Status.SENT )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestMessage.kt$TestMessage$val PREVIEW = MessagePreview( id = "messageId", conversationId = ConversationId("value", "domain"), content = MessagePreviewContent.WithUser.MissedCall(TestUser.OTHER_USER.name), isSelfMessage = false, date = "2022-03-30T15:36:00.000Z", visibility = Message.Visibility.VISIBLE, senderUserId = TestUser.USER_ID )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestMessage.kt$TestMessage$val TEXT_MESSAGE = Message.Regular( id = "messageID", content = MessageContent.Text("Some Text Message"), conversationId = ConversationId("convo-id", "convo.domain"), date = "some-date", senderUserId = UserId("user-id", "domain"), senderClientId = ClientId("client-id"), status = Message.Status.SENT, editStatus = Message.EditStatus.NotEdited )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestMessage.kt$TestMessage$val UI_MESSAGE_HEADER = MessageHeader( username = UIText.DynamicString("username"), membership = Membership.Guest, isLegalHold = true, messageTime = MessageTime("12.23pm"), messageStatus = MessageStatus.Untouched, messageId = "messageID", connectionState = null, isSenderDeleted = false, isSenderUnavailable = false )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestMessage.kt$TestMessage$val UI_TEXT_MESSAGE = UIMessage( userAvatarData = UserAvatarData(asset = null, availabilityStatus = UserAvailabilityStatus.NONE), messageSource = MessageSource.OtherUser, messageHeader = UI_MESSAGE_HEADER, messageContent = TextMessage(MessageBody(UIText.DynamicString("Some Text Message"))), messageFooter = MessageFooter(UI_MESSAGE_HEADER.messageId) )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestTeam.kt$TestTeam$val TEAM_ID = TeamId("Some-team")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestUser.kt$TestUser$val MEMBER_OTHER = MemberDetails(OTHER_USER, Member.Role.Member)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestUser.kt$TestUser$val MEMBER_SELF = MemberDetails(SELF_USER, Member.Role.Admin)</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestUser.kt$TestUser$val OTHER_USER = OtherUser( USER_ID.copy(value = "otherValue"), name = "otherUsername", handle = "otherHandle", email = "otherEmail", phone = "otherPhone", accentId = 0, teamId = TeamId("otherTeamId"), connectionStatus = ConnectionState.ACCEPTED, previewPicture = UserAssetId("value", "domain"), completePicture = UserAssetId("value", "domain"), availabilityStatus = UserAvailabilityStatus.AVAILABLE, userType = UserType.INTERNAL, botService = null, deleted = false )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestUser.kt$TestUser$val SELF_USER = SelfUser( SELF_USER_ID, name = "username", handle = "handle", email = "email", phone = "phone", accentId = 0, teamId = TeamId("teamId"), connectionStatus = ConnectionState.ACCEPTED, previewPicture = UserAssetId("value", "domain"), completePicture = UserAssetId("value", "domain"), availabilityStatus = UserAvailabilityStatus.AVAILABLE )</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestUser.kt$TestUser$val SELF_USER_ID = UserId("selfValue", "domain")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:TestUser.kt$TestUser$val USER_ID = UserId("value", "domain")</ID>
        <ID>LibraryCodeMustSpecifyReturnType:UICallParticipantMapperTest.kt$UICallParticipantMapperTest$@Test fun givenParticipant_whenMappingToUICallParticipant_thenCorrectValuesShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:UIParticipantMapperTest.kt$UIParticipantMapperTest$@Test fun givenMemberDetails_whenMappingToContacts_thenCorrectValuesShouldBeReturned()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WelcomeViewModelTest.kt$WelcomeViewModelTest$@Test fun `given a navigation, when it's go to create enterprise account, then should emit NavigationCommand create team`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WelcomeViewModelTest.kt$WelcomeViewModelTest$@Test fun `given a navigation, when it's go to create private account, then should emit NavigationCommand create personal account`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WelcomeViewModelTest.kt$WelcomeViewModelTest$@Test fun `given a navigation, when it's go to login, then should emit NavigationCommand login`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WelcomeViewModelTest.kt$WelcomeViewModelTest$@Test fun `given a navigation, when navigating back, then should delegate call to navigation manager back`()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireActivityViewModelTest.kt$WireActivityViewModelTest.Companion$val TEST_ACCOUNT_INFO = AccountInfo.Valid(UserId("user_id", "domain.de"))</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireNotificationManagerTest.kt$WireNotificationManagerTest$// todo: check later with boris! @Test fun givenAuthenticatedUser_whenFetchAndShowNotificationsOnceCalled_thenConnectionPolicyManagerIsCalled()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireNotificationManagerTest.kt$WireNotificationManagerTest$@Test fun givenASingleUserId_whenCallingFetchAndShowOnceInParallel_thenPushNotificationIsHandledOnlyOnce()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireNotificationManagerTest.kt$WireNotificationManagerTest$@Test fun givenASingleUserId_whenNotificationReceivedAndNotCurrentUser_shouldSkipNotification()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireNotificationManagerTest.kt$WireNotificationManagerTest$@Test fun givenCurrentScreenIsConversation_whenObserveCalled_thenNotificationForThatConversationIsHidden()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireNotificationManagerTest.kt$WireNotificationManagerTest$@Test fun givenNoIncomingCalls_whenObserveCalled_thenCallNotificationHides()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireNotificationManagerTest.kt$WireNotificationManagerTest$@Test fun givenNotAuthenticatedUser_whenFetchAndShowNotificationsOnceCalled_thenNothingHappen()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireNotificationManagerTest.kt$WireNotificationManagerTest$@Test fun givenNotAuthenticatedUser_whenObserveCalled_thenNothingHappenAndCallNotificationHides()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireNotificationManagerTest.kt$WireNotificationManagerTest$@Test fun givenSomeEstablishedCalls_whenAppIsNotVisible_thenOngoingCallServiceRun()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireNotificationManagerTest.kt$WireNotificationManagerTest$@Test fun givenSomeIncomingCalls_whenAppIsNotVisible_thenCallNotificationHidden()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireNotificationManagerTest.kt$WireNotificationManagerTest$@Test fun givenSomeIncomingCalls_whenAppIsVisible_thenCallNotificationShowed()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireNotificationManagerTest.kt$WireNotificationManagerTest$@Test fun givenSomeNotificationsAndCurrentScreenIsConversation_whenObserveCalled_thenNotificationIsNotShowed()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireNotificationManagerTest.kt$WireNotificationManagerTest$@Test fun givenSomeNotifications_whenAppIsInBackgroundAndNoUserLoggedIn_thenMessageNotificationNotShowed()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireNotificationManagerTest.kt$WireNotificationManagerTest$@Test fun givenSomeNotifications_whenAppIsInForegroundAndNoUserLoggedIn_thenMessageNotificationNotShowed()</ID>
        <ID>LibraryCodeMustSpecifyReturnType:WireNotificationManagerTest.kt$WireNotificationManagerTest$@Test fun givenSomeNotifications_whenObserveCalled_thenCallNotificationShowed()</ID>
        <ID>MaximumLineLength:com.wire.android.feature.AccountSwitchUseCaseTest.kt:51</ID>
        <ID>MaximumLineLength:com.wire.android.feature.AccountSwitchUseCaseTest.kt:77</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.feature.AccountSwitchUseCaseTest.kt:142</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.feature.AccountSwitchUseCaseTest.kt:206</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.framework.FakeKaliumFileSystem.kt:110</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.framework.TestConversation.kt:127</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.framework.TestConversationDetails.kt:60</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.mapper.UserTypeMapperTest.kt:55</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.WireActivityViewModelTest.kt:524</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.common.topappbar.CommonTopAppBarViewModelTest.kt:233</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.conversations.banner.usecase.ObserveConversationMembersByTypesUseCaseTest.kt:154</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.home.gallery.MediaGalleryViewModelTest.kt:297</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.settings.devices.SelfDevicesViewModelTest.kt:92</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.ui.settings.devices.SelfDevicesViewModelTest.kt:94</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.util.ScreenStateObserverTest.kt:136</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.util.ScreenStateObserverTest.kt:138</ID>
        <ID>NoBlankLineBeforeRbrace:com.wire.android.util.lifecycle.ConnectionPolicyManagerTest.kt:187</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.feature.AccountSwitchUseCaseTest.kt:102</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.feature.AccountSwitchUseCaseTest.kt:145</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.framework.TestConversation.kt:86</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.migration.ScalaServerConfigDAOTest.kt:114</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.migration.ScalaServerConfigDAOTest.kt:124</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.WireActivityViewModelTest.kt:527</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.authentication.create.username.CreateAccountUsernameViewModelTest.kt:196</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.authentication.create.username.CreateAccountUsernameViewModelTest.kt:54</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.calling.OngoingCallViewModelTest.kt:63</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversations.MessageComposerViewModelTest.kt:205</ID>
        <ID>NoConsecutiveBlankLines:com.wire.android.ui.home.conversations.info.ConversationInfoViewModelArrangement.kt:44</ID>
        <ID>NoMultipleSpaces:com.wire.android.framework.TestConversation.kt:125</ID>
        <ID>NoSemicolons:com.wire.android.mapper.MessageMapperTest.kt:88</ID>
        <ID>NoTrailingSpaces:com.wire.android.migration.ScalaServerConfigDAOTest.kt:114</ID>
        <ID>NoTrailingSpaces:com.wire.android.migration.ScalaServerConfigDAOTest.kt:55</ID>
        <ID>NoTrailingSpaces:com.wire.android.migration.ScalaServerConfigDAOTest.kt:62</ID>
        <ID>NoUnusedImports:com.wire.android.mapper.MessageMapperTest.kt:45</ID>
        <ID>NoUnusedImports:com.wire.android.ui.calling.initiating.InitiatingCallViewModelTest.kt:45</ID>
        <ID>NoUnusedImports:com.wire.android.ui.userprofile.other.OtherUserProfileViewModelArrangement.kt:51</ID>
        <ID>SpacingAroundColon:com.wire.android.migration.MigrateServerConfigUseCaseTest.kt:130</ID>
        <ID>SpacingAroundColon:com.wire.android.migration.MigrateServerConfigUseCaseTest.kt:134</ID>
        <ID>SpacingAroundColon:com.wire.android.migration.MigrateServerConfigUseCaseTest.kt:138</ID>
        <ID>SpacingAroundCurly:com.wire.android.ui.calling.incoming.IncomingCallViewModelTest.kt:131</ID>
        <ID>UnsafeCallOnNullableType:IncomingCallViewModelTest.kt$IncomingCallViewModelTest$viewModel.establishedCallConversationId!!</ID>
        <ID>UnsafeCallOnNullableType:WireNotificationManagerTest.kt$WireNotificationManagerTest$TestUser.SELF_USER.handle!!</ID>
    </CurrentIssues>
</SmellBaseline>
